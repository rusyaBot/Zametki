import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.Mock;
import org.mockito.Mockito;
import org.mockito.junit.MockitoJUnitRunner;


@RunWith(MockitoJUnitRunner.class) // –∑–∞–ø—É—Å—Ç–∏–ª–∏ —ç—Ç–æ—Ç –∫–ª–∞—Å—Å —Å Mockito
public class MockiAndZaglushki {

    //–ü–æ–¥–∫–ª—é—á–∏—Ç—å Mockito –∫ —Ç–µ—Å—Ç–æ–≤–æ–º—É –∫–ª–∞—Å—Å—É
    //–í—Ç–æ—Ä–æ–π —à–∞–≥ ‚Äî –ø–æ–¥–∫–ª—é—á–∏—Ç—å Mockito –∫ —Ç–µ—Å—Ç–æ–≤–æ–º—É –∫–ª–∞—Å—Å—É, —á—Ç–æ–±—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –º–æ–∫ –∏–º–µ–Ω–Ω–æ –≤ –Ω—ë–º.
    // –í –ø—Ä–∏–º–µ—Ä–µ —Å –∫—É—Ä—å–µ—Ä–∞–º–∏ –ø—É—Å—Ç—å —ç—Ç–æ –±—É–¥–µ—Ç –∫–ª–∞—Å—Å OrderManagementServiceTest.
    //–ï—Å—Ç—å –¥–≤–∞ —Å–ø–æ—Å–æ–±–∞: –∞–Ω–Ω–æ—Ç–∞—Ü–∏—è –∏ –º–µ—Ç–æ–¥.
    //–° –ø–æ–º–æ—â—å—é –∞–Ω–Ω–æ—Ç–∞—Ü–∏–∏. –ü–µ—Ä–µ–¥ —Ç–µ—Å—Ç–æ–≤—ã–º –∫–ª–∞—Å—Å–æ–º –Ω—É–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –∞–Ω–Ω–æ—Ç–∞—Ü–∏—é @RunWith —Å —Ä–∞–Ω–Ω–µ—Ä–æ–º MockitoJUnitRunner:
//    @RunWith(MockitoJUnitRunner.class)
//    public class OrderManagementServiceTest {
//    ...
//    }

    // –° –ø–æ–º–æ—â—å—é –º–µ—Ç–æ–¥–∞. –ù—É–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –≤ —Ç–µ—Å—Ç–æ–≤—ã–π –∫–ª–∞—Å—Å —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π –º–µ—Ç–æ–¥ —Å —Ç–µ–ª–æ–º MockitoAnnotations.initMocks(this).
    // –ü—É—Å—Ç—å –º–µ—Ç–æ–¥ –Ω–∞–∑—ã–≤–∞–µ—Ç—Å—è init() ‚Äî –æ—Ç initialize, ¬´–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å¬ª.
    // –ú–æ–∫ –Ω—É–∂–Ω–æ —Å–æ–∑–¥–∞–≤–∞—Ç—å –ø–µ—Ä–µ–¥ –∫–∞–∂–¥—ã–º —Ç–µ—Å—Ç–æ–º. –ü–æ—ç—Ç–æ–º—É –ø–µ—Ä–µ–¥ –º–µ—Ç–æ–¥–æ–º init() –ø–æ–Ω–∞–¥–æ–±–∏—Ç—Å—è –∞–Ω–Ω–æ—Ç–∞—Ü–∏—è @Before.
//    public class OrderManagementServiceTest {
//        @Before
//        public void init() {
//            MockitoAnnotations.initMocks(this);
//        }
//    ...
//    }

    // –û–±—ã—á–Ω–æ –º–æ–∫–∏ –ø–æ–¥–∫–ª—é—á–∞—é—Ç —á–µ—Ä–µ–∑ –∞–Ω–Ω–æ—Ç–∞—Ü–∏—é: —Ç–∞–∫ —É–¥–æ–±–Ω–µ–µ.
    // –ù–æ –∏–Ω–æ–≥–¥–∞ —ç—Ç–æ –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ: –Ω–∞–ø—Ä–∏–º–µ—Ä, –∫–æ–≥–¥–∞ —É–∂–µ –µ—Å—Ç—å –∞–Ω–Ω–æ—Ç–∞—Ü–∏—è –¥–ª—è –ø–∞—Ä–∞–º–µ—Ç—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤ ‚Äî @RunWith(Parameterized.class).
    // –î–≤–µ –æ–¥–∏–Ω–∞–∫–æ–≤—ã–µ –∞–Ω–Ω–æ—Ç–∞—Ü–∏–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –Ω–µ–ª—å–∑—è. –¢–æ–≥–¥–∞ –ø–æ–¥–æ–π–¥—ë—Ç –≤—Ç–æ—Ä–æ–π —Å–ø–æ—Å–æ–±.

    //–ó–∞–≤–∏—Å–∏–º–æ—Å—Ç—å –∫ —Ç–µ—Å—Ç–æ–≤–æ–º—É –∫–ª–∞—Å—Å—É –ø–æ–¥–∫–ª—é—á–µ–Ω–∞. –¢–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ —Å–æ–∑–¥–∞—Ç—å —Å–∞–º –º–æ–∫.
    //–°–æ–∑–¥–∞—Ç—å –º–æ–∫
    //–¢—É—Ç —Ç–æ–∂–µ –µ—Å—Ç—å –¥–≤–∞ —Å–ø–æ—Å–æ–±–∞ ‚Äî —á–µ—Ä–µ–∑ –∞–Ω–Ω–æ—Ç–∞—Ü–∏—é –∏–ª–∏ –º–µ—Ç–æ–¥.
    //–ê–Ω–Ω–æ—Ç–∞—Ü–∏—é @Mock –Ω—É–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ø–µ—Ä–µ–¥ —Ç–µ–º, –∫–∞–∫ —Å–æ–∑–¥–∞–≤–∞—Ç—å –æ–±—ä–µ–∫—Ç. –¢—ã –∫–∞–∫ –±—É–¥—Ç–æ –≥–æ–≤–æ—Ä–∏—à—å: ¬´—ç—Ç–æ—Ç –æ–±—ä–µ–∫—Ç –±—É–¥–µ—Ç –º–æ–∫–æ–º¬ª.
    //@Mock
    //CourierManagementService courierManagementService;
    //–ú–µ—Ç–æ–¥ mock() –Ω—É–∂–Ω–æ –≤—ã–∑–≤–∞—Ç—å –¥–ª—è –æ–±—ä–µ–∫—Ç–∞ –∫–ª–∞—Å—Å–∞, –∫–æ—Ç–æ—Ä—ã–π –ø—Ä–µ–¥—Å—Ç–æ–∏—Ç —Å—ã–º–∏—Ç–∏—Ä–æ–≤–∞—Ç—å. –ö–∞–∫ –∞—Ä–≥—É–º–µ–Ω—Ç –ø–µ—Ä–µ–¥–∞—é—Ç –∏–º—è –∫–ª–∞—Å—Å–∞:
    //CourierManagementService courierManagementService = Mockito.mock(CourierManagementService.class);
    //üìé –ê–Ω–Ω–æ—Ç–∞—Ü–∏—è –ª–∞–∫–æ–Ω–∏—á–Ω–µ–µ, –ø–æ—ç—Ç–æ–º—É –µ—ë –∏—Å–ø–æ–ª—å–∑—É—é—Ç —á–∞—â–µ.


    //–í–æ—Ç –∫–∞–∫ –≤—ã–≥–ª—è–¥–∏—Ç —Ç–µ—Å—Ç –¥–ª—è OrderManagementService —Ü–µ–ª–∏–∫–æ–º. –ë–∏–±–ª–∏–æ—Ç–µ–∫—É –ø–æ–¥–∫–ª—é—á–∞–ª–∏ —á–µ—Ä–µ–∑ –∞–Ω–Ω–æ—Ç–∞—Ü–∏—é, –º–æ–∫ —Ç–æ–∂–µ —Å–æ–∑–¥–∞–≤–∞–ª–∏ —á–µ—Ä–µ–∑ –Ω–µ—ë:
//    @RunWith(MockitoJUnitRunner.class) // –∑–∞–ø—É—Å—Ç–∏–ª–∏ —ç—Ç–æ—Ç –∫–ª–∞—Å—Å —Å Mockito
//    public class OrderManagementServiceTest {
//
//        @Mock // —Å–æ–∑–¥–∞–ª–∏ –º–æ–∫
//        CourierManagementService courierManagementService;
//
//        @Test
//        public void assignToCourierTest() { // —Å–∞–º —Ç–µ—Å—Ç
//            OrderManagementService orderManagementService = new OrderManagementService(courierManagementService);
//            orderManagementService.assignToCourier();
//            Mockito.verify(courierManagementService, Mockito.times(1)).getFreeCourier();
//        }

    //–ó–∞–¥–∞–Ω–∏–µ
    //–ü—Ä–µ–¥—Å—Ç–∞–≤—å, —á—Ç–æ —Ç–µ–±–µ –Ω—É–∂–Ω–æ –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –æ–±—ä–µ–∫—Ç –∫–ª–∞—Å—Å–∞ ArrayList.
    //–°–æ–∑–¥–∞–π –º–æ–∫-–æ–±—ä–µ–∫—Ç list: –¥–æ–±–∞–≤—å –∞–Ω–Ω–æ—Ç–∞—Ü–∏–∏ @RunWith –∏ @Mock.
//    @Mock
//    ArrayList<String> list;
//
//    @Test
//    public void test() {
//        list.add("1");
//        list.add("2");
//        list.add("3");
//    }


    //–ó–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    //–ú–µ—Ç–æ–¥—ã –º–æ–∫–æ–≤ –Ω–µ –≤–æ–∑–≤—Ä–∞—â–∞—é—Ç —Ç–µ –∂–µ –∑–Ω–∞—á–µ–Ω–∏—è, —á—Ç–æ –∏ —Ä–µ–∞–ª—å–Ω—ã–µ –æ–±—ä–µ–∫—Ç—ã. –ù–∞–ø—Ä–∏–º–µ—Ä, —Ä–µ–∞–ª—å–Ω—ã–π –º–µ—Ç–æ–¥ –±—É–¥–µ—Ç –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å –∑–Ω–∞—á–µ–Ω–∏–µ 100. –ú–æ–∫ –≤–µ—Ä–Ω—ë—Ç –Ω–µ 100, –∞ 0.
    //–¢–∞–∫ –ø–æ–ª—É—á–∞–µ—Ç—Å—è, –ø–æ—Ç–æ–º—É —á—Ç–æ –º–æ–∫–∏ –º–µ–Ω—è—é—Ç –≤—Å—ë –Ω–∞ –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é. –ï—Å–ª–∏ –º–µ—Ç–æ–¥ –≤–æ–∑–≤—Ä–∞—â–∞–ª —Å—Å—ã–ª–æ—á–Ω—ã–π —Ç–∏–ø, –º–æ–∫ –≤–µ—Ä–Ω—ë—Ç null. –ï—Å–ª–∏ –ø—Ä–∏–º–∏—Ç–∏–≤ ‚Äî –∑–Ω–∞—á–µ–Ω–∏–µ –ø—Ä–∏–º–∏—Ç–∏–≤–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é.
    //–í–æ—Ç –ø—Ä–∏–º–µ—Ä. –ï—Å—Ç—å –∫–ª–∞—Å—Å Delivery, –≤ –∫–æ—Ç–æ—Ä–æ–º –∫–∞–∂–¥—ã–π –º–µ—Ç–æ–¥ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–≤–æ—ë –∑–Ω–∞—á–µ–Ω–∏–µ:
    //public class Delivery {
    //
    //        ...
    //
    //        public String getDefaultName() {
    //        return "Unknown delivery"; // –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç Unknown delivery
    //    }
    //
    //    public double getDefaultWeight() {
    //        return 100.0; // –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç 100.0
    //    }
    //
    //    public boolean getDefaultImportanceState() {
    //        return true; // –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç true
    //    }
    //
    //        ...
    //}

    //–ï—Å–ª–∏ —Å–æ–∑–¥–∞—Ç—å —Ä–µ–∞–ª—å–Ω—ã–π –æ–±—ä–µ–∫—Ç –∫–ª–∞—Å—Å–∞ Delivery, –º–µ—Ç–æ–¥—ã –≤–µ—Ä–Ω—É—Ç Unknown delivery, 100.0 –∏–ª–∏ true —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ.
    //–ï—Å–ª–∏ —Å–æ–∑–¥–∞—Ç—å –º–æ–∫ —Ç–∞–∫–æ–≥–æ –∫–ª–∞—Å—Å–∞, –º–µ—Ç–æ–¥—ã –≤–µ—Ä–Ω—É—Ç:
    //getDefaultName() ‚Äî null;
    //getDefaultWeight() ‚Äî 0.0;
    //getDefaultImportanceState() ‚Äî false.
    //–ò–º–µ–Ω–Ω–æ —ç—Ç–æ –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –¥–ª—è –¥–∞–Ω–Ω—ã—Ö —Ç–∏–ø–∞ String, double –∏ boolean.
    //–°—Ä–∞–≤–Ω–∏:
    //import org.junit.Test;
    //import org.junit.runner.RunWith;
    //import org.mockito.Mock;
    //import org.mockito.junit.MockitoJUnitRunner;
    //
    //@RunWith(MockitoJUnitRunner.class)
    //public class Praktikum {
    //
    //    @Mock
    //    Delivery mockedDelivery;
    //
    //    Delivery testDelivery = new Delivery();
    //
    //    @Test
    //    public void test() {
    //        // –ü–æ–ª—É—á–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –∏–∑ –º–æ–∫–∞
    //        System.out.println(mockedDelivery.getDefaultName()); // –≤—ã–≤–µ–¥–µ—Ç—Å—è null
    //        System.out.println(mockedDelivery.getDefaultWeight()); // –≤—ã–≤–µ–¥–µ—Ç—Å—è 0.0
    //        System.out.println(mockedDelivery.getDefaultImportanceState()); // –≤—ã–≤–µ–¥–µ—Ç—Å—è false
    //                // –ü–æ–ª—É—á–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –∏–∑ —Ä–µ–∞–ª—å–Ω–æ–≥–æ –æ–±—ä–µ–∫—Ç–∞
    //        System.out.println(testDelivery.getDefaultName()); // –≤—ã–≤–µ–¥–µ—Ç—Å—è Unknown delivery
    //        System.out.println(testDelivery.getDefaultWeight()); // –≤—ã–≤–µ–¥–µ—Ç—Å—è 100.0
    //        System.out.println(testDelivery.getDefaultImportanceState()); // –≤—ã–≤–µ–¥–µ—Ç—Å—è true
    //    }
    //
    //}

    //–ú–æ–∫–∏ –¥–ª—è private –∏–ª–∏ final
    //–ú–æ–∂–Ω–æ —Å–æ–∑–¥–∞—Ç—å –º–æ–∫ –ª—é–±–æ–≥–æ –∫–ª–∞—Å—Å–∞ –∏–ª–∏ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞. –ù–æ –Ω–µ–ª—å–∑—è —Å–æ–∑–¥–∞—Ç—å –º–æ–∫ –¥–ª—è private –∏–ª–∏ final. –≠—Ç–æ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è —Å–∞–º–æ–≥–æ Mockito.
    //–ù–∞–ø—Ä–∏–º–µ—Ä, –Ω–µ –ø–æ–ª—É—á–∏—Ç—Å—è —Å–æ–∑–¥–∞—Ç—å –º–æ–∫ —Å—Ç—Ä–æ–∫–æ–≤–æ–≥–æ –æ–±—ä–µ–∫—Ç–∞: –∫–ª–∞—Å—Å String –≤ Java –æ–±—ä—è–≤–ª–µ–Ω –∫–∞–∫ final.
    //–ï—Å–ª–∏ –Ω–∞–ø–∏—Å–∞—Ç—å —Ç–∞–∫–æ–π –∫–æ–¥:
    //@Mock
    //String mockedString;
    //–ü–æ–ª—É—á–∏—Ç—Å—è –æ—à–∏–±–∫–∞:
    //org.mockito.exceptions.base.MockitoException:
    //Cannot mock/spy class java.lang.String
    //Mockito cannot mock/spy because :
    // - final class
    //–ï—Å–ª–∏ –æ—á–µ–Ω—å –Ω—É–∂–Ω–æ —Å–æ–∑–¥–∞—Ç—å –º–æ–∫ –¥–ª—è final, —Ä–µ—à–µ–Ω–∏–µ –µ—Å—Ç—å: –æ–Ω–æ –æ–ø–∏—Å–∞–Ω–æ –≤ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏. –ù–µ –±—É–¥–µ–º –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—Ç—å—Å—è –Ω–∞ –Ω—ë–º –ø–æ–¥—Ä–æ–±–Ω–æ, –ø–æ—Ç–æ–º—É —á—Ç–æ —ç—Ç–æ –Ω–µ –æ—á–µ–Ω—å —á–∞—Å—Ç—ã–π —Å–ª—É—á–∞–π.
    //–í —Å–ª–µ–¥—É—é—â–µ–º —É—Ä–æ–∫–µ —Ç—ã —É–∑–Ω–∞–µ—à—å, –∫–∞–∫–∏–µ –º–µ—Ç–æ–¥—ã –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å –º–æ–∫–∞–º–∏.


    //–ú–µ—Ç–æ–¥—ã Mockito
    //–í –±–∏–±–ª–∏–æ—Ç–µ–∫–µ –úockito –µ—Å—Ç—å —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã, –∫–æ—Ç–æ—Ä—ã–µ –ø–æ–Ω–∞–¥–æ–±—è—Ç—Å—è –≤ —Ä–∞–∑–Ω—ã—Ö –ø—Ä–æ–≤–µ—Ä–∫–∞—Ö.
    //–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∞—Ä–≥—É–º–µ–Ω—Ç—ã: verify()
    //–ü–æ–º–æ–≥–∞–µ—Ç —É–±–µ–¥–∏—Ç—å—Å—è, —á—Ç–æ –º–µ—Ç–æ–¥ –≤—ã–∑–≤–∞–ª–∏ —Å –æ–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω—ã–º–∏ –∞—Ä–≥—É–º–µ–Ω—Ç–∞–º–∏. –ù–∞–ø—Ä–∏–º–µ—Ä, –µ—Å—Ç—å –∫–ª–∞—Å—Å Car ‚Äî –æ–Ω –æ–ø–∏—Å—ã–≤–∞–µ—Ç –º–∞—à–∏–Ω—É. –ú–µ—Ç–æ–¥ setCarBrand() –∑–∞–¥–∞—ë—Ç –±—Ä–µ–Ω–¥ –º–∞—à–∏–Ω—ã:
    //–î–æ–ø—É—Å—Ç–∏–º, –Ω—É–∂–Ω–æ —É–±–µ–¥–∏—Ç—å—Å—è, —á—Ç–æ –≤ –º–µ—Ç–æ–¥ –ø–µ—Ä–µ–¥–∞–ª–∏ –∞—Ä–≥—É–º–µ–Ω—Ç Lamborghini. –¢—É—Ç –∏ –ø–æ–º–æ–∂–µ—Ç verify(). –°–ø–µ—Ä–≤–∞ —Ç—ã —Å–æ–∑–¥–∞—ë—à—å –º–æ–∫-–æ–±—ä–µ–∫—Ç –∫–ª–∞—Å—Å–∞ Car:
    //import org.junit.Test;
    //import org.junit.runner.RunWith;
    //import org.mockito.Mock;
    //import org.mockito.Mockito;
    //import org.mockito.junit.MockitoJUnitRunner;
    //
    //@RunWith(MockitoJUnitRunner.class)
    //public class Praktikum {
    //
    //    @Mock
    //    Car car; // —Å–æ–∑–¥–∞–ª–∏ –º–æ–∫
    //
    //    @Test
    //    public void test() {
    //        car.setCarBrand("Lamborghini"); // –≤—ã–∑–≤–∞–ª–∏ –º–µ—Ç–æ–¥ –æ–±—ä–µ–∫—Ç–∞ —Å –∞—Ä–≥—É–º–µ–Ω—Ç–æ–º
    //        Mockito.verify(car).setCarBrand("Lamborghini"); // –ø—Ä–æ–≤–µ—Ä–∏–ª–∏, —á—Ç–æ –º–µ—Ç–æ–¥ –≤—ã–∑–≤–∞–Ω —Å —ç—Ç–∏–º –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–º
    //    }
    //}

    // –ó–∞–¥–∞–Ω–∏–µ
    // –î–æ–ø–∏—à–∏ —Ç–µ—Å—Ç, –∫–æ—Ç–æ—Ä—ã–π –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –≤—ã–∑–æ–≤ –º–µ—Ç–æ–¥–∞ updateText() —Å –∞—Ä–≥—É–º–µ–Ω—Ç–æ–º ¬´–û–±–Ω–æ–≤–ª—ë–Ω–Ω—ã–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π¬ª.
//    @Mock
//    Comment comment;
//
//    @Test
//    public void test() {
//        comment.updateText("–û–±–Ω–æ–≤–ª—ë–Ω–Ω—ã–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π");
//        Mockito.verify(comment).updateText("–û–±–Ω–æ–≤–ª—ë–Ω–Ω—ã–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π");
//    }

    //–ü—Ä–æ–≤–µ—Ä–∏—Ç—å, —Å–∫–æ–ª—å–∫–æ —Ä–∞–∑ –≤—ã–∑–≤–∞–ª–∏ –º–µ—Ç–æ–¥: times()
    //–ú–æ–∂–Ω–æ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å, —á—Ç–æ –º–µ—Ç–æ–¥ –≤—ã–∑–≤–∞–ª–∏ –¥–≤–∞ —Ä–∞–∑–∞, —Ç—Ä–∏ –∏–ª–∏ –µ—â—ë —Å–∫–æ–ª—å–∫–æ —É–≥–æ–¥–Ω–æ. –ù–∞–ø—Ä–∏–º–µ—Ä, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–≤–∞ —Ä–∞–∑–∞ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–ª –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π.
    //–î–ª—è —ç—Ç–æ–≥–æ –≤–Ω—É—Ç—Ä–∏ verify() –Ω—É–∂–Ω–æ –≤—ã–∑–≤–∞—Ç—å –µ—â—ë –æ–¥–∏–Ω –º–µ—Ç–æ–¥ ‚Äî times(). –í—ã–≥–ª—è–¥–∏—Ç —ç—Ç–æ —Ç–∞–∫: Mockito.verify(car, Mockito.times(3)).setCarBrand("Lamborghini").
    //–¶–µ–ª–∏–∫–æ–º —Ç–∞–∫:
    //import org.junit.Test;
    //import org.junit.runner.RunWith;
    //import org.mockito.Mock;
    //import org.mockito.Mockito;
    //import org.mockito.junit.MockitoJUnitRunner;
    //
    //@RunWith(MockitoJUnitRunner.class)
    //public class Praktikum {
    //
    //    @Mock
    //    Car car;
    //
    //    @Test
    //    public void test() {
    //        car.setCarBrand("Lamborghini");
    //        car.setCarBrand("Lamborghini");
    //        car.setCarBrand("Lamborghini"); // –≤—ã–∑–≤–∞–ª–∏ –º–µ—Ç–æ–¥ —Å –æ–¥–Ω–∏–º –∞—Ä–≥—É–º–µ–Ω—Ç–æ–º —Ç—Ä–∏ —Ä–∞–∑–∞
    //        Mockito.verify(car, Mockito.times(3)).setCarBrand("Lamborghini");
    //                // –ø—Ä–æ–≤–µ—Ä–∏–ª–∏, —á—Ç–æ –º–µ—Ç–æ–¥ –≤—ã–∑–≤–∞–Ω —Ç—Ä–∏ —Ä–∞–∑–∞ —Å —ç—Ç–∏–º –∞—Ä–≥—É–º–µ–Ω—Ç–æ–º
    //    }
    //}

    //–ó–∞–¥–∞–Ω–∏–µ 2
    //–ü—Ä–µ–¥—Å—Ç–∞–≤—å, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ä–∞–∑ –ø–æ–ø—ã—Ç–∞–ª—Å—è —Å—Ç–µ—Ä–µ—Ç—å —Å–≤–æ–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π.
    // –ü—Ä–æ–≤–µ—Ä—å, —á—Ç–æ –º–µ—Ç–æ–¥ updateText() –≤—ã–∑—ã–≤–∞–ª—Å—è –¥–≤–∞ —Ä–∞–∑–∞.
    // @Mock
    //    Comment comment;
    //
    //    @Test
    //    public void test() {
    //        comment.updateText("");
    //        comment.updateText("");
    //        Mockito.verify(comment, Mockito.times(2)).updateText("");// –¥–æ–ø–∏—à–∏ –∫–æ–¥ —Ç—É—Ç
    //    }


    //–ú–µ—Ç–æ–¥—ã any
    //–ò–Ω–æ–≥–¥–∞ –Ω—É–∂–Ω–æ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å, —á—Ç–æ –º–µ—Ç–æ–¥ –≤—ã–∑–≤–∞–ª–∏ —Å –∫–∞–∫–∏–º-—Ç–æ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–º. –ù–µ–≤–∞–∂–Ω–æ, —Å –∫–∞–∫–∏–º –∏–º–µ–Ω–Ω–æ. –ù–∞–ø—Ä–∏–º–µ—Ä, –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å: –º–∞—à–∏–Ω–µ –∑–∞–¥–∞–ª–∏ –±—Ä–µ–Ω–¥. –ö–∞–∫–æ–π –∏–º–µ–Ω–Ω–æ ‚Äî –Ω–µ —Ç–∞–∫ –≤–∞–∂–Ω–æ, –ø–æ–¥–æ–π–¥—ë—Ç –ª—é–±–æ–π.
    //–ü–æ–Ω–∞–¥–æ–±—è—Ç—Å—è –º–µ—Ç–æ–¥—ã —Å–µ–º–µ–π—Å—Ç–≤–∞ any:
    //any() –ø—Ä–æ–≤–µ—Ä—è–µ—Ç, —á—Ç–æ –≤ –º–µ—Ç–æ–¥ –ø–µ—Ä–µ–¥–∞–Ω –ª—é–±–æ–π –∞—Ä–≥—É–º–µ–Ω—Ç —Å—Å—ã–ª–æ—á–Ω–æ–≥–æ —Ç–∏–ø–∞. –ù–∞–ø—Ä–∏–º–µ—Ä, –æ–±—ä–µ–∫—Ç.
    //anyString(), anyList(), anyInt() –ø—Ä–∏–º–µ–Ω—è—é—Ç –¥–ª—è –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –æ–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω–æ–≥–æ —Ç–∏–ø–∞: —Å—Ç—Ä–æ–∫–∞, —Å–ø–∏—Å–æ–∫, —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ.
    //–ù–∞–ø—Ä–∏–º–µ—Ä, –º–æ–∂–Ω–æ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å, —á—Ç–æ –≤ –º–µ—Ç–æ–¥ setCarBrand() –ø–µ—Ä–µ–¥–∞–ª–∏ –ª—é–±—É—é —Å—Ç—Ä–æ–∫—É:
    //import org.junit.Test;
    //import org.junit.runner.RunWith;
    //import org.mockito.Mock;
    //import org.mockito.Mockito;
    //import org.mockito.junit.MockitoJUnitRunner;
    //
    //@RunWith(MockitoJUnitRunner.class)
    //public class Praktikum {
    //
    //    @Mock
    //    Car car;
    //
    //    @Test
    //    public void test() {
    //        car.setCarBrand("Lamborghini"); // –≤—ã–∑–≤–∞–ª–∏ –º–µ—Ç–æ–¥ –æ–±—ä–µ–∫—Ç–∞ —Å –∞—Ä–≥—É–º–µ–Ω—Ç–æ–º
    //        Mockito.verify(car).setCarBrand(Mockito.anyString());
    //                // –ø—Ä–æ–≤–µ—Ä–∏–ª–∏, —á—Ç–æ –º–µ—Ç–æ–¥ –≤—ã–∑–≤–∞–Ω —Å –ª—é–±–æ–π —Å—Ç—Ä–æ–∫–æ–π –≤ –∫–∞—á–µ—Å—Ç–≤–µ –∞—Ä–≥—É–º–µ–Ω—Ç–∞
    //        Mockito.verify(car).setCarBrand(Mockito.any()); // —Ç–æ–∂–µ —Å—Ä–∞–±–æ—Ç–∞–µ—Ç: String - —Å—Å—ã–ª–æ—á–Ω—ã–π —Ç–∏–ø –¥–∞–Ω–Ω—ã—Ö
    //    }
    //}

    // –ß—Ç–æ —Ç–∞–∫–æ–µ —Å—Ç–∞–±
    // –í –ø—Ä–æ—à–ª—ã—Ö —É—Ä–æ–∫–∞—Ö —Ç–µ–±–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –º–æ–∫ ‚Äî ¬´—Å–ª–µ–ø–æ–∫¬ª –æ–±—ä–µ–∫—Ç–∞. –ï—Å—Ç—å –µ—â—ë –æ–¥–∏–Ω –≤–∏–¥ ¬´–¥—É–±–ª—ë—Ä–æ–≤¬ª —Ä–µ–∞–ª—å–Ω–æ–≥–æ –∫–æ–¥–∞ ‚Äî —Å—Ç–∞–±—ã.
    // –û—Ç –∞–Ω–≥–ª–∏–π—Å–∫–æ–≥–æ stub ‚Äî ¬´–∑–∞–≥–ª—É—à–∫–∞¬ª.
    // –ß–µ–º –æ—Ç–ª–∏—á–∞—é—Ç—Å—è –º–æ–∫–∏ –∏ —Å—Ç–∞–±—ã
    // –ú–æ–∫–∏ –ø—Ä–æ–≤–µ—Ä—è—é—Ç –ø–æ–≤–µ–¥–µ–Ω–∏–µ –æ–±—ä–µ–∫—Ç–æ–≤. –û–Ω–∏ –ø–æ–º–æ–≥–∞—é—Ç —É–±–µ–¥–∏—Ç—å—Å—è, —á—Ç–æ –º–µ—Ç–æ–¥ —Å—Ä–∞–±–æ—Ç–∞–ª —Ç–∞–∫, –∫–∞–∫ –∏ –æ–∂–∏–¥–∞–ª–æ—Å—å.
    // –ù–∞–ø—Ä–∏–º–µ—Ä, —á—Ç–æ –µ–≥–æ –≤—ã–∑–≤–∞–ª–∏ —Ä–æ–≤–Ω–æ –¥–≤–∞ —Ä–∞–∑–∞. –ò–ª–∏ —á—Ç–æ –≤–æ–æ–±—â–µ –≤—ã–∑–≤–∞–ª–∏.
    // –°–æ —Å—Ç–∞–±–∞–º–∏ –ø–æ-–¥—Ä—É–≥–æ–º—É: –æ–Ω–∏ –Ω–µ –ø—Ä–æ–≤–µ—Ä—è—é—Ç –ø–æ–≤–µ–¥–µ–Ω–∏–µ, –∞ –∏–º–∏—Ç–∏—Ä—É—é—Ç –æ–±—ä–µ–∫—Ç –≤ –æ–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω–æ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏.
    // –ù–∞–ø—Ä–∏–º–µ—Ä, –æ–±—ä–µ–∫—Ç-–º–∞—à–∏–Ω—É, —É –∫–æ—Ç–æ—Ä–æ–π –º–µ—Ç–æ–¥—É ¬´–∑–∞–¥–∞—Ç—å –±—Ä–µ–Ω–¥¬ª –ø–µ—Ä–µ–¥–∞–ª–∏ Lamborgini. –°—Ç–∞–± –Ω–µ –ø—Ä–æ–≤–µ—Ä–∏—Ç, –∫–∞–∫ –æ—Ç—Ä–∞–±–æ—Ç–∞–ª –º–µ—Ç–æ–¥. –û–Ω –ø—Ä–æ—Å—Ç–æ –≤–µ—Ä–Ω—ë—Ç –∑–∞—Ä–∞–Ω–µ–µ –æ–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ.
    //üìå –°—Ç–∞–± –∏–º–∏—Ç–∏—Ä—É–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ ‚Äî –Ω–∞–ø—Ä–∏–º–µ—Ä, –∫–æ—à–∫—É —Å –∞—Ä–≥—É–º–µ–Ω—Ç–æ–º ¬´—Ä—ã–∂–∞—è¬ª. –ê –º–æ–∫ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –ø–æ–≤–µ–¥–µ–Ω–∏–µ –æ–±—ä–µ–∫—Ç–∞.
    // –ù–∞–ø—Ä–∏–º–µ—Ä, —á—Ç–æ –º–µ—Ç–æ–¥, –∫–æ—Ç–æ—Ä—ã–π –∑–∞–¥–∞—ë—Ç —Ü–≤–µ—Ç –∫–æ—à–∫–µ, –≤—ã–∑–≤–∞–ª–∏ —Å –∞—Ä–≥—É–º–µ–Ω—Ç–æ–º ¬´—Ä—ã–∂–∞—è¬ª.

    //–ù–∞–ø—Ä–∏–º–µ—Ä, –µ—Å—Ç—å –∫–ª–∞—Å—Å –∑–∞–∫–∞–∑–∞ Order. –í –Ω—ë–º –Ω–∞–ø–∏—Å–∞–ª–∏ –º–µ—Ç–æ–¥ getId(): –æ–Ω –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –Ω–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —Ö—Ä–∞–Ω—è—Ç—Å—è –≤–æ –≤–Ω–µ—à–Ω–µ–π –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö: –º–µ—Ç–æ–¥ –∏—â–µ—Ç –∏—Ö —Ç–∞–º.
    //–ñ–¥–∞—Ç—å –æ—Ç–≤–µ—Ç –æ—Ç –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –¥–æ–ª–≥–æ. –ß—Ç–æ–±—ã —É—Å–∫–æ—Ä–∏—Ç—å —Ä–∞–±–æ—Ç—É, –º–æ–∂–Ω–æ —Å–æ–∑–¥–∞—Ç—å —Å—Ç–∞–±. –û–Ω –≤—Å–µ–≥–¥–∞ –±—É–¥–µ—Ç –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å –æ–¥–∏–Ω –∏ —Ç–æ—Ç –∂–µ –Ω–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞ ‚Äî –Ω–∞–ø—Ä–∏–º–µ—Ä, 251. –í—ã–≥–ª—è–¥–∏—Ç —Ç–∞–∫, –∫–∞–∫ –±—É–¥—Ç–æ –º–µ—Ç–æ–¥ —Å—Ö–æ–¥–∏–ª –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –∏ –ø—Ä–∏–Ω—ë—Å –∑–Ω–∞—á–µ–Ω–∏–µ. –ê –Ω–∞ —Å–∞–º–æ–º –¥–µ–ª–µ –Ω–∏–∫—É–¥–∞ –æ–Ω –Ω–µ —Ö–æ–¥–∏–ª: –µ–º—É –∑–∞—Ä–∞–Ω–µ–µ —Å–∫–∞–∑–∞–ª–∏ ¬´–ø—Ä–∏–Ω–µ—Å–∏ –∑–Ω–∞—á–µ–Ω–∏–µ 251¬ª.
    //–ú–æ–∫ —Ç—É—Ç –Ω–µ –ø–æ–º–æ–∂–µ—Ç. –û–Ω –Ω–µ —É–º–µ–µ—Ç –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å –æ–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ ‚Äî 2, 5 –∏–ª–∏ 251. –û–Ω —Ç–æ–ª—å–∫–æ —Å–º–æ—Ç—Ä–∏—Ç, –∫–∞–∫ –æ—Ç—Ä–∞–±–æ—Ç–∞–ª –º–µ—Ç–æ–¥, –∏ —Å–≤–µ—Ä—è–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Å –æ–∂–∏–¥–∞–Ω–∏—è–º–∏.
    //–ú–æ–∫ –∏ –º–µ—Ç–æ–¥—ã Mockito	–°—Ç–∞–±
    //üë©‚Äçüíª: –ü—Ä–æ–≤–µ—Ä—å, –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–∏—Ç—Å—è –º–µ—Ç–æ–¥ –≤ –æ–±—ä–µ–∫—Ç–µ. –ï–≥–æ –¥–æ–ª–∂–Ω—ã –±—ã–ª–∏ –≤—ã–∑–≤–∞—Ç—å —Å –∞—Ä–≥—É–º–µ–Ω—Ç–æ–º ¬´251¬ª. –ö–∞–∫–æ–π —Ç–∞–º –∞—Ä–≥—É–º–µ–Ω—Ç –≤ —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏?	üë©‚Äçüíª: –°–¥–µ–ª–∞–π –≤–∏–¥, —á—Ç–æ –≤—ã–ø–æ–ª–Ω–∏–ª—Å—è –º–µ—Ç–æ–¥, –∫–æ—Ç–æ—Ä—ã–π –∑–∞–±–∏—Ä–∞–µ—Ç –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –Ω–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞. –í–µ—Ä–Ω–∏ –∑–Ω–∞—á–µ–Ω–∏–µ ¬´251¬ª.
    //ü§ñ: –†–µ–∞–ª—å–Ω–æ –≤—ã–∑–≤–∞–ª–∏ —Å ¬´251¬ª.	ü§ñ: 251.
    //üìå –ö–∞–∫ —Ç–æ–ª—å–∫–æ –Ω—É–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ—Ç —Å—Ç–æ—Ä–æ–Ω–Ω–µ–≥–æ —Å–µ—Ä–≤–∏—Å–∞, –ø–æ–Ω–∞–¥–æ–±–∏—Ç—Å—è —Å—Ç–∞–±.

    // –ö–∞–∫ —Å–æ–∑–¥–∞–≤–∞—Ç—å –∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å—Ç–∞–±—ã
    // –ò—Ç–∞–∫, —Å—Ç–∞–±—ã –ø–æ–º–æ–≥–∞—é—Ç —Å—ã–º–∏—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–±—ä–µ–∫—Ç–∞. –°–µ–π—á–∞—Å —Ç—ã —É–∑–Ω–∞–µ—à—å, –∫–∞–∫ –∏—Ö —Å–æ–∑–¥–∞–≤–∞—Ç—å.
    // –í–∞–∂–Ω—ã–π –º–æ–º–µ–Ω—Ç: –≤ Mockito –Ω–µ—Ç —Ç–∞–∫–æ–π —Å—É—â–Ω–æ—Å—Ç–∏ –∫–∞–∫ ¬´—Å—Ç–∞–±¬ª. –î–ª—è –ø—Ä–æ–≥—Ä–∞–º–º—ã —ç—Ç–æ –º–æ–∫, —Ç–æ–ª—å–∫–æ —Å –æ—Å–æ–±—ã–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏.
    // –ü–æ—ç—Ç–æ–º—É —Ç–µ–±–µ –Ω—É–∂–Ω–æ –±—É–¥–µ—Ç —Å–¥–µ–ª–∞—Ç—å –≤—Å—ë —Ç–æ –∂–µ —Å–∞–º–æ–µ, —á—Ç–æ –¥–ª—è –º–æ–∫–∞, –∞ –ø–æ—Ç–æ–º –¥–æ–±–∞–≤–∏—Ç—å –∑–∞–≤–µ—Ä—à–∞—é—â–∏–µ —à—Ç—Ä–∏—Ö–∏.

    //–°–æ–∑–¥–∞—Ç—å –º–æ–∫
    //–ü–µ—Ä–≤—ã–µ —à–∞–≥–∏ ‚Äî —Ç–∞–∫–∏–µ –∂–µ, –∫–∞–∫ –¥–ª—è –º–æ–∫–∞. –ù—É–∂–Ω–æ:
    //–ø–æ–¥–∫–ª—é—á–∏—Ç—å –±–∏–ª–∏–æ—Ç–µ–∫—É Mockito –≤ pom.xml,
    //–ø–æ–¥–∫–ª—é—á–∏—Ç—å Mockito –∫ —Ç–µ—Å—Ç–æ–≤–æ–º—É –∫–ª–∞—Å—Å—É,
    //–Ω–∞–ø–∏—Å–∞—Ç—å –∞–Ω–Ω–æ—Ç–∞—Ü–∏—é @Mock.
    //–î–æ–ø—É—Å—Ç–∏–º, —Ç–∞–∫:
    //
    //    @Mock
    //    Engine engine; // —Å–æ–∑–¥–∞–ª–∏ –º–æ–∫, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–ø–æ–∑–∂–µ —Å—Ç–∞–Ω–µ—Ç —Å—Ç–∞–±–æ–º
    //
    //}

    //–î–æ–±–∞–≤–∏—Ç—å –¥–≤–∞ –º–µ—Ç–æ–¥–∞
    //–ß—Ç–æ–±—ã –ø—Ä–µ–≤—Ä–∞—Ç–∏—Ç—å –º–æ–∫ –≤ —Å—Ç–∞–±, –ø–æ–Ω–∞–¥–æ–±–∏—Ç—Å—è –¥–≤–∞ –º–µ—Ç–æ–¥–∞:
    //when() ‚Äî ¬´–∫–æ–≥–¥–∞ –≤—ã–∑–≤–∞–Ω –º–µ—Ç–æ–¥¬ª;
    //thenReturn() ‚Äî ¬´–≤–µ—Ä–Ω—É—Ç—å –∑–Ω–∞—á–µ–Ω–∏–µ¬ª.
    //–¢–∞–∫ —Ç—ã –∑–∞–¥–∞—ë—à—å —Ç–æ —Å–∞–º–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ –¥–æ–ª–∂–µ–Ω –≤–µ—Ä–Ω—É—Ç—å –º–µ—Ç–æ–¥: ¬´–∫–æ–≥–¥–∞ –≤—ã–∑–≤–∞–Ω –º–µ—Ç–æ–¥ —Ç–∞–∫–æ–π-—Ç–æ, –≤–µ—Ä–Ω–∏ —Ç–∞–∫–æ–µ-—Ç–æ –∑–Ω–∞—á–µ–Ω–∏–µ¬ª.
    //–ù–∞–ø—Ä–∏–º–µ—Ä, –≤ –∫–ª–∞—Å—Å–µ Engine –µ—Å—Ç—å –º–µ—Ç–æ–¥ getPower(). –û–Ω –¥–æ–ª–∂–µ–Ω –≤–µ—Ä–Ω—É—Ç—å –∑–Ω–∞—á–µ–Ω–∏–µ 125:
    //public class Engine {
    //
    //    public int getPower() {
    //        return 125;
    //    }
    //
    //}
    //–ö–ª–∞—Å—Å Car –∏—Å–ø–æ–ª—å–∑—É–µ—Ç getPower() –≤ —Å–≤–æ—ë–º –º–µ—Ç–æ–¥–µ getEnginePower().
    //public class Car {
    //
    //    Engine engine;
    //
    //    public Car(Engine engine) {
    //        this.engine = engine;
    //    }
    //
    //    public int getEnginePower() {
    //        return engine.getPower(); // –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –º–µ—Ç–æ–¥ –¥—Ä—É–≥–æ–≥–æ –∫–ª–∞—Å—Å–∞
    //    }
    //
    //}
    //–î–æ–ø—É—Å—Ç–∏–º, –Ω—É–∂–Ω–æ, —á—Ç–æ–±—ã –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –º–µ—Ç–æ–¥ getPower() –≤–æ–∑–≤—Ä–∞—â–∞–ª –∏–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ ‚Äî 500. –ß—Ç–æ–±—ã –Ω–µ –º–µ–Ω—è—Ç—å –∫–æ–¥ –¥—Ä—É–≥–æ–≥–æ –∫–ª–∞—Å—Å–∞, –º–æ–∂–Ω–æ —Å–æ–∑–¥–∞—Ç—å —Å—Ç–∞–± –∏ –Ω–∞–ø–∏—Å–∞—Ç—å —Ç–∞–∫: Mockito.when(engine.getPower()).thenReturn(500). –¢–æ –µ—Å—Ç—å ¬´–∫–æ–≥–¥–∞ –≤—ã–∑–≤–∞–Ω –º–µ—Ç–æ–¥ getPower(), –≤–µ—Ä–Ω–∏ –∑–Ω–∞—á–µ–Ω–∏–µ 500¬ª.
    //–¶–µ–ª–∏–∫–æ–º —Ç–∞–∫:
    //import org.junit.Test;
    //import org.junit.runner.RunWith;
    //import org.mockito.Mock;
    //import org.mockito.Mockito;
    //import org.mockito.junit.MockitoJUnitRunner;
    //
    //@RunWith(MockitoJUnitRunner.class)
    //public class Praktikum {
    //
    //    @Mock
    //    Engine engine; // —Å–æ–∑–¥–∞–ª–∏ —Å—Ç–∞–±
    //
    //    @Test
    //    public void test() {
    //        Car car = new Car(engine);
    //        System.out.println(car.getEnginePower()); // –∞–Ω–Ω–æ—Ç–∞—Ü–∏—è @Mock —Å—Ç–∏—Ä–∞–µ—Ç –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è, –ø–æ—ç—Ç–æ–º—É –≤—ã–≤–µ–¥–µ—Ç—Å—è 0
    //        Mockito.when(engine.getPower()).thenReturn(500);
    //                // —Ç–µ–ø–µ—Ä—å –ø—Ä–∏ –≤—ã–∑–æ–≤–µ getPower() –≤—Å–µ–≥–¥–∞ –±—É–¥–µ—Ç –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å—Å—è 500
    //        System.out.println(car.getEnginePower()); // –≤—ã–≤–µ–¥–µ—Ç—Å—è 500
    //    }
    //}

    //–ó–∞–¥–∞–Ω–∏–µ 1
    //–ü—Ä–µ–¥—Å—Ç–∞–≤—å, —á—Ç–æ —Ç—ã —Ç–µ—Å—Ç–∏—Ä—É–µ—à—å –º–µ—Ç–æ–¥ getFriendsCount() –∫–ª–∞—Å—Å–∞ Friend. –û–Ω –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥—Ä—É–∑–µ–π.
    //import java.util.List;
    //
    //public class Friend {
    //    List<String> friends;
    //
    //    public Friend(List<String> friends) {
    //        this.friends = friends;
    //    }
    //
    //    public int getFriendsCount() {
    //        return friends.size();
    //    }
    //}
    //–°–æ–∑–¥–∞–π —Å—Ç–∞–± –¥–ª—è –æ–±—ä–µ–∫—Ç–∞ –∫–ª–∞—Å—Å–∞ List, –∫–æ—Ç–æ—Ä—ã–π –ø—Ä–∏ –≤—ã–∑–æ–≤–µ –º–µ—Ç–æ–¥–∞ size() –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–µ 100. –ò—Å–ø–æ–ª—å–∑—É–π –∞–Ω–Ω–æ—Ç–∞—Ü–∏—é @Mock.
    //import org.junit.Test;
    //import org.junit.Assert;
    //import org.junit.runner.RunWith;
    //import org.mockito.Mock;
    //import org.mockito.Mockito;
    //import org.mockito.junit.MockitoJUnitRunner;
    //
    //import java.util.List;
    //
    //@RunWith(MockitoJUnitRunner.class)
    //public class Praktikum {
    //
    //    @Mock // –¥–æ–±–∞–≤—å –∞–Ω–Ω–æ—Ç–∞—Ü–∏—é
    //    List<String> list;
    //
    //    @Test
    //    public void friendsTest() {
    //        Friend friend = new Friend(list);// —Å–æ–∑–¥–∞–π –æ–±—ä–µ–∫—Ç –∫–ª–∞—Å—Å–∞ Friend
    //        Mockito.when(friend.getFriendsCount()).thenReturn(100); // —Å–æ–∑–¥–∞–π —Å—Ç–∞–±
    //        Assert.assertEquals(100, friend.getFriendsCount());
    //    }
    //}

    //–°—Ç–∞–±—ã –¥–ª—è –º–µ—Ç–æ–¥–æ–≤ —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
    //–ú–æ–∂–Ω–æ —Å–æ–∑–¥–∞—Ç—å —Å—Ç–∞–±—ã –∏ –¥–ª—è –æ–±—ä–µ–∫—Ç–æ–≤, —É –∫–æ—Ç–æ—Ä—ã—Ö –µ—Å—Ç—å –º–µ—Ç–æ–¥—ã —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏. –ù–∞–ø—Ä–∏–º–µ—Ä, –º–µ—Ç–æ–¥ getWheelsCount() –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–µ—Ä–µ–¥–Ω–∏—Ö –∏ –∑–∞–¥–Ω–∏—Ö –∫–æ–ª—ë—Å, –∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏—Ö —Å—É–º–º—É:
    //public class Wheel {
    //
    //    public int countWheels(int frontWheels, int backWheels) {
    //        return frontWheels + backWheels;
    //    }
    //
    //}
    //public class Car {
    //
    //    Wheel wheel;
    //
    //    public Car(Wheel wheel) {
    //        this.wheel = wheel;
    //    }
    //
    //    public int getWheelsCount(int frontWheels, int backWheels) {
    //        return wheel.countWheels(frontWheels, backWheels);
    //    }
    //
    //}
    //–í –∫–æ–¥–µ —Å—Ç–∞–±–∞ –Ω—É–∂–Ω–æ —É–∫–∞–∑–∞—Ç—å, –ø—Ä–∏ –∫–∞–∫–∏—Ö –∞—Ä–≥—É–º–µ–Ω—Ç–∞—Ö –º–µ—Ç–æ–¥ –¥–æ–ª–∂–µ–Ω –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å –∑–Ω–∞—á–µ–Ω–∏–µ. –ù–∞–ø—Ä–∏–º–µ—Ä, —Å—Ç–∞–± –±—É–¥–µ—Ç –≤—ã–≤–æ–¥–∏—Ç—å 5, —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–ª–∏ –∞—Ä–≥—É–º–µ–Ω—Ç—ã 2 –∏ 2. –ò–Ω–∞—á–µ ‚Äî 0 –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é:
    //import org.junit.Test;
    //import org.junit.runner.RunWith;
    //import org.mockito.Mock;
    //import org.mockito.Mockito;
    //import org.mockito.junit.MockitoJUnitRunner;
    //
    //@RunWith(MockitoJUnitRunner.class)
    //public class Praktikum {
    //
    //    @Mock
    //    Wheel wheel;
    //
    //    @Test
    //    public void test() {
    //        Car car = new Car(wheel);
    //        Mockito.when(wheel.countWheels(2, 2)).thenReturn(5);
    //        System.out.println(car.getWheelsCount(2,2)); // –≤—ã–≤–µ–¥–µ—Ç—Å—è 5
    //    }
    //}


    //–ó–∞–¥–∞–Ω–∏–µ 2
    //–ü—Ä–µ–¥—Å—Ç–∞–≤—å, —á—Ç–æ –≤ —Ç–µ—Å—Ç–µ –Ω—É–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –∑–∞—Ä–ø–ª–∞—Ç—ã –∫—É—Ä—å–µ—Ä–∞.
    // –î–ª—è —ç—Ç–æ–≥–æ –∏—Å–ø–æ–ª—å–∑—É—é—Ç –º–µ—Ç–æ–¥ calcSalary() –∫–ª–∞—Å—Å–∞ PayrollCalculator.
    // –ù–µ –≤–∞–∂–Ω–æ –∫–∞–∫ –∏–º–µ–Ω–Ω–æ –±—É–¥–µ—Ç –ø–æ–¥—Å—á–∏—Ç–∞–Ω–∞ –∑–∞—Ä–ø–ª–∞—Ç–∞. –î–ª—è —ç—Ç–æ–≥–æ –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å—Ç–∞–±.
    // public class PayrollCalculator {
    //
    //    public int calcSalary(int hours, int rate, int bonus) {
    //        return hours * rate + bonus;
    //    }
    //
    //}
    //–°–æ–∑–¥–∞–π —Å—Ç–∞–± –¥–ª—è PayrollCalculator, –∫–æ—Ç–æ—Ä—ã–π –ø—Ä–∏ –≤—ã–∑–æ–≤–µ –º–µ—Ç–æ–¥–∞ calcSalary() —Å–æ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏ 0, 0, 0 –±—É–¥–µ—Ç –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å 50000.
    //import org.junit.Test;
    //import org.junit.Assert;
    //import org.junit.runner.RunWith;
    //import org.mockito.Mock;
    //import org.mockito.Mockito;
    //import org.mockito.junit.MockitoJUnitRunner;
    //
    //@RunWith(MockitoJUnitRunner.class)
    //public class NewTest {
    //
    //    @Mock // –¥–æ–±–∞–≤—å –∞–Ω–Ω–æ—Ç–∞—Ü–∏—é
    //    PayrollCalculator payrollCalculator;
    //
    //    @Test
    //    public void calcSalaryTest() {
    //        Mockito.when(payrollCalculator.calcSalary(0, 0, 0)).thenReturn(50000); // –æ–ø–∏—à–∏ —Å—Ç–∞–±
    //        Assert.assertEquals(50000, payrollCalculator.calcSalary(0, 0, 0));
    //    }
    //
    //}


    //–ú–µ—Ç–æ–¥—ã any –¥–ª—è —Å—Ç–∞–±–æ–≤
    //–°–æ —Å—Ç–∞–±–∞–º–∏ —Ç–æ–∂–µ –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –º–µ—Ç–æ–¥—ã —Å–µ–º–µ–π—Å—Ç–≤–∞ any. –ù–∞–ø—Ä–∏–º–µ—Ä, –Ω—É–∂–Ω–æ, —á—Ç–æ–±—ã —Å—Ç–∞–± –≤—ã–≤–æ–¥–∏–ª –∑–Ω–∞—á–µ–Ω–∏–µ, —Ç–æ–ª—å–∫–æ –∫–æ–≥–¥–∞ –≤ –Ω–µ–≥–æ –ø–µ—Ä–µ–¥–∞—é—Ç —Ü–µ–ª—ã–µ —á–∏—Å–ª–∞:
    //import org.junit.Test;
    //import org.junit.runner.RunWith;
    //import org.mockito.Mock;
    //import org.mockito.Mockito;
    //import org.mockito.junit.MockitoJUnitRunner;
    //
    //@RunWith(MockitoJUnitRunner.class)
    //public class Praktikum {
    //
    //    @Mock
    //    Wheel wheel;
    //
    //    @Test
    //    public void test() {
    //        Car car = new Car(wheel);
    //        Mockito.when(wheel.countWheels(Mockito.anyInt(), Mockito.anyInt())).thenReturn(5);
    //        /* –¢–µ–ø–µ—Ä—å —Å—Ç–∞–± –≤—ã–≤–µ–¥–µ—Ç 5, –µ—Å–ª–∏ –ø–µ—Ä–µ–¥–∞—Ç—å –≤ –Ω–µ–≥–æ –ª—é–±–æ–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ.
    //                –ò–Ω–∞—á–µ - 0 */
    //                System.out.println(car.getWheelsCount(2,2)); // –≤—ã–≤–µ–¥–µ—Ç—Å—è 5
    //        System.out.println(car.getWheelsCount(3,7)); // –≤—ã–≤–µ–¥–µ—Ç—Å—è 5
    //    }


    //–ó–∞–¥–∞–Ω–∏–µ 3
    //–í–µ—Ä–Ω–∏—Å—å –∫ —Å—Ç–∞–±—É, –∫–æ—Ç–æ—Ä—ã–π —É–∂–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å ‚Äî PayrollCalculator.
    // –û–±–Ω–æ–≤–∏ –∫–æ–¥ —Ç–∞–∫, —á—Ç–æ–±—ã –º–µ—Ç–æ–¥ –≤–æ–∑–≤—Ä–∞—â–∞–ª 80000: –Ω–µ –≤–∞–∂–Ω–æ, –∫–∞–∫–∏–µ –∏–º–µ–Ω–Ω–æ –∑–Ω–∞—á–µ–Ω–∏—è –¥–ª—è hours, rate –∏ bonus –≤ –Ω–µ–≥–æ –ø–µ—Ä–µ–¥–∞–ª–∏.
    //import org.junit.Test;
    //import org.junit.Assert;
    //import org.junit.runner.RunWith;
    //import org.mockito.Mock;
    //import org.mockito.Mockito;
    //import org.mockito.junit.MockitoJUnitRunner;
    //
    //@RunWith(MockitoJUnitRunner.class)
    //public class NewTest {
    //
    //    @Mock
    //    PayrollCalculator payrollCalculator;
    //
    //    @Test
    //    public void calcSalaryTest() {
    //			  Mockito.when(payrollCalculator
    //                .calcSalary(Mockito.anyInt(), Mockito.anyInt(), Mockito.anyInt()))
    //                .thenReturn(80000);
    //        Assert.assertEquals(80000, payrollCalculator.calcSalary(40, 90, 0));
    //    }
    //
    //}

    //–ß—Ç–æ —Ç–∞–∫–æ–µ spy
    //–ö–∞–∫ —Ç—ã –∑–Ω–∞–µ—à—å, –º–æ–∫ –∏–º–∏—Ç–∏—Ä—É–µ—Ç –ø–æ–≤–µ–¥–µ–Ω–∏–µ –æ–±—ä–µ–∫—Ç–∞. –û–Ω –Ω–µ –∏—Å–ø–æ–ª–Ω—è–µ—Ç –µ–≥–æ –º–µ—Ç–æ–¥—ã –ø–æ-–Ω–∞—Å—Ç–æ—è—â–µ–º—É: —Ç–æ–ª—å–∫–æ –ø—Ä–∏—Ç–≤–æ—Ä—è–µ—Ç—Å—è, —á—Ç–æ –≤—ã–∑—ã–≤–∞–µ—Ç –∏—Ö. –ê —Å–∞–º –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ª–∏–±–æ –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é, –ª–∏–±–æ —Ç–æ, –∫–æ—Ç–æ—Ä–æ–µ –µ–º—É —Å–∫–∞–∑–∞–ª–∏ –≤–µ—Ä–Ω—É—Ç—å.
    //–í—Å–ø–æ–º–Ω–∏ –ø—Ä–∏–º–µ—Ä: –µ—Å—Ç—å –∫–ª–∞—Å—Å Delivery. –ï–≥–æ –º–µ—Ç–æ–¥ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–µ 100.0:
    //public class Delivery {
    //
    //        ...
    //
    //    public double getDefaultWeight() {
    //        return 100.0; // –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç 100.0
    //    }
    //
    //        ...
    //}
    //–ï—Å–ª–∏ —Å–æ–∑–¥–∞—Ç—å –º–æ–∫ —Ç–∞–∫–æ–≥–æ –∫–ª–∞—Å—Å–∞, –º–µ—Ç–æ–¥ –≤–µ—Ä–Ω—ë—Ç 0.0: —ç—Ç–æ –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é.
    //–ú–æ–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å —Ç–∞–∫, —á—Ç–æ–±—ã –º–µ—Ç–æ–¥ –≤—ã–ø–æ–ª–Ω–∏–ª—Å—è –ø–æ-–Ω–∞—Å—Ç–æ—è—â–µ–º—É: —Ç–æ –µ—Å—Ç—å getDefaultWeight() –≤–µ—Ä–Ω—ë—Ç 100.0. –î–ª—è —ç—Ç–æ–≥–æ –ø—Ä–∏–≥–æ–¥–∏—Ç—Å—è –æ—Å–æ–±—ã–π –≤–∏–¥ –º–æ–∫–∞: —à–ø–∏–æ–Ω.

    //ü¶π –®–ø–∏–æ–Ω, –∏–ª–∏ spy ‚Äî —ç—Ç–æ –º–æ–∫, –∫–æ—Ç–æ—Ä—ã–π –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –≤—ã–∑—ã–≤–∞–µ—Ç –∏ –∏—Å–ø–æ–ª–Ω—è–µ—Ç –≤—Å–µ —Å–≤–æ–∏ –º–µ—Ç–æ–¥—ã. –û–Ω –≤–µ–¥—ë—Ç —Å–µ–±—è —Ç–∞–∫ –∂–µ, –∫–∞–∫ —Ä–µ–∞–ª—å–Ω—ã–π –æ–±—ä–µ–∫—Ç.
    //–ü—Ä–∏ —ç—Ç–æ–º —É —à–ø–∏–æ–Ω–æ–≤ —Ç–∞–∫ –∂–µ, –∫–∞–∫ —É –º–æ–∫–æ–≤:
    //–º–æ–∂–Ω–æ ¬´–ø–æ–ø—Ä–æ—Å–∏—Ç—å¬ª –º–µ—Ç–æ–¥ –≤–µ—Ä–Ω—É—Ç—å –æ–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ. –ù–∞–ø—Ä–∏–º–µ—Ä, 50 –¥–ª—è –º–µ—Ç–æ–¥–∞ getDefaultWeight();
    //–º–æ–∂–Ω–æ –æ—Ç—Å–ª–µ–¥–∏—Ç—å, –∫–∞–∫–æ–π –º–µ—Ç–æ–¥ —Å–∫–æ–ª—å–∫–æ —Ä–∞–∑ –≤—ã–∑—ã–≤–∞–ª–∏ –∏ –≤—ã–∑—ã–≤–∞–ª–∏ –ª–∏ –≤–æ–æ–±—â–µ.
    //–í –æ–±—â–µ–º, –∑–∞ —à–ø–∏–æ–Ω–∞–º–∏ —Ç–æ–∂–µ –º–æ–∂–Ω–æ –ø—Ä–∏—Å—Ç–∞–ª—å–Ω–æ —Å–ª–µ–¥–∏—Ç—å: –≥–¥–µ —á—Ç–æ –≤—ã–∑–≤–∞–ª–æ—Å—å –∏ –≤–µ—Ä–Ω—É–ª–æ—Å—å.

    // –ö–∞–∫ —Å–æ–∑–¥–∞—Ç—å —à–ø–∏–æ–Ω–∞
    // –ö–∞–∫ –∏ —Å –º–æ–∫–∞–º–∏, –µ—Å—Ç—å –¥–≤–∞ —Å–ø–æ—Å–æ–±–∞ ‚Äî —á–µ—Ä–µ–∑ –∞–Ω–Ω–æ—Ç–∞—Ü–∏—é –∏–ª–∏ –º–µ—Ç–æ–¥.
    //‚òùüèª –í–∞–∂–Ω—ã–π –Ω—é–∞–Ω—Å: –º–æ–∫ —Å—Ç—Ä–æ–∏—Ç—Å—è –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–ª–∞—Å—Å–∞.
    // –¢—ã —Å–æ–∑–¥–∞—ë—à—å –º–æ–∫ –∫–ª–∞—Å—Å–∞, –∞ –ø–æ—Ç–æ–º —É–∂–µ –≤ –Ω—ë–º –æ–±—ä–µ–∫—Ç. –®–ø–∏–æ–Ω —Å—Ç—Ä–æ–∏—Ç—Å—è –Ω–∞ –æ—Å–Ω–æ–≤–µ –æ–±—ä–µ–∫—Ç–∞, –∞ –Ω–µ –∫–ª–∞—Å—Å–∞.
    // –ü–æ—ç—Ç–æ–º—É –Ω—É–∂–Ω–æ, —á—Ç–æ–±—ã –≤ –∫–ª–∞—Å—Å–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –±—ã–ª –æ–±—ä–µ–∫—Ç.
    //–ï—Å–ª–∏ –≤ –∫–ª–∞—Å—Å–µ –µ—Å—Ç—å –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä –±–µ–∑ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤, Mockito —Å–∞–º —Å–æ–∑–¥–∞—Å—Ç –æ–±—ä–µ–∫—Ç ‚Äî –ø–æ–¥ –∫–∞–ø–æ—Ç–æ–º.
    // –ù–∏—á–µ–≥–æ –¥–µ–ª–∞—Ç—å –Ω–µ –Ω—É–∂–Ω–æ. –ï—Å–ª–∏ –Ω—É–∂–Ω—ã –ø–∞—Ä–∞–º–µ—Ç—Ä—ã, –ø—Ä–∏–¥—ë—Ç—Å—è —Å–æ–∑–¥–∞—Ç—å –æ–±—ä–µ–∫—Ç —è–≤–Ω–æ —á–µ—Ä–µ–∑ new.

    //–°–æ–∑–¥–∞—Ç—å —à–ø–∏–æ–Ω–∞ —á–µ—Ä–µ–∑ –∞–Ω–Ω–æ—Ç–∞—Ü–∏—é
    //–ù—É–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –∞–Ω–Ω–æ—Ç–∞—Ü–∏—é @Spy –ø–µ—Ä–µ–¥ —Ç–µ–º, –∫–∞–∫ —Å–æ–∑–¥–∞–≤–∞—Ç—å –æ–±—ä–µ–∫—Ç. –ù–µ –∑–∞–±—É–¥—å —É–∫–∞–∑–∞—Ç—å —Ä–∞–Ω–Ω–µ—Ä Mockito –Ω–∞–¥ —Ç–µ—Å—Ç–æ–≤—ã–º –∫–ª–∞—Å—Å–æ–º.
    //–í –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä–µ Example –µ—Å—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä, –ø–æ—ç—Ç–æ–º—É –Ω—É–∂–Ω–æ —Å–æ–∑–¥–∞—Ç—å –æ–±—ä–µ–∫—Ç —è–≤–Ω–æ:
    //public class Example{
    //  private int id;
    //  public Example(int id){
    //     this.id = id;
    //   }
    //}
    //
    //@RunWith(MockitoJUnitRunner.class)//—Ä–∞–Ω–Ω–µ—Ä
    //public class ExampleTest{
    //@Spy // —à–ø–∏–æ–Ω
    //Example example = new Example(3); //—Å–æ–∑–¥–∞–ª–∏ –æ–±—ä–µ–∫—Ç
    ////...
    //}
    //–ï—Å–ª–∏ –≤ –∫–ª–∞—Å—Å–µ –µ—Å—Ç—å –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä –±–µ–∑ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤, –º–æ–∂–Ω–æ —è–≤–Ω–æ –Ω–µ —Å–æ–∑–¥–∞–≤–∞—Ç—å –æ–±—ä–µ–∫—Ç. –î–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –Ω–∞–ø–∏—Å–∞—Ç—å —Ç–∞–∫:
    //  public Example() {
    //}
    //
    //@RunWith(MockitoJUnitRunner.class)//—Ä–∞–Ω–Ω–µ—Ä
    //public class ExampleTest{
    //@Spy
    //Example example;
    ////...
    //}

    // –í—Ç–æ—Ä–æ–π —Å–ø–æ—Å–æ–±: –°–æ–∑–¥–∞—Ç—å —à–ø–∏–æ–Ω–∞ —á–µ—Ä–µ–∑ –º–µ—Ç–æ–¥
    //–ù—É–∂–Ω–æ –≤—ã–∑–≤–∞—Ç—å –º–µ—Ç–æ–¥ spy() –¥–ª—è –æ–±—ä–µ–∫—Ç–∞, –∑–∞ –∫–æ—Ç–æ—Ä—ã–º –ø—Ä–µ–¥—Å—Ç–æ–∏—Ç —à–ø–∏–æ–Ω–∏—Ç—å. –ö–∞–∫ –∞—Ä–≥—É–º–µ–Ω—Ç –ø–µ—Ä–µ–¥–∞–π —Å–∞–º –æ–±—ä–µ–∫—Ç:
    //Example example = new Example(3); //—Å–æ–∑–¥–∞–ª–∏ –æ–±—ä–µ–∫—Ç
    //Example exampleSpy  = Mockito.spy(example); //—Å–æ–∑–¥–∞–ª–∏ —à–ø–∏–æ–Ω –æ–±—ä–µ–∫—Ç–∞
    //–ü–æ—Ö–æ–∂–µ –Ω–∞ –º–æ–∫, —Ç–æ–ª—å–∫–æ –≤ —Å–ª—É—á–∞–µ –º–æ–∫–∞ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–º –±—É–¥–µ—Ç –∫–ª–∞—Å—Å ‚Äî –ø–æ—Ç–æ–º—É —á—Ç–æ –æ–Ω —Å—Ç—Ä–æ–∏—Ç—Å—è –Ω–∞ –∫–ª–∞—Å—Å–µ.
    // –î–ª—è –º–æ–∫–∞ –±—ã–ª–æ –±—ã —Ç–∞–∫: Example exampleMock = Mockito.mock(Example.class).

    //–õ–∞–∫–æ–Ω–∏—á–Ω–µ–µ ‚Äî —á–µ—Ä–µ–∑ –∞–Ω–Ω–æ—Ç–∞—Ü–∏—é. –ú–µ—Ç–æ–¥ –ø—Ä–∏–º–µ–Ω—è—é—Ç, –µ—Å–ª–∏ –∞–Ω–Ω–æ—Ç–∞—Ü–∏–∏ —É–∂–µ –∑–∞–Ω—è—Ç—ã —á–µ–º-—Ç–æ –¥—Ä—É–≥–∏–º: –Ω–∞–ø—Ä–∏–º–µ—Ä, –ø–∞—Ä–∞–º–µ—Ç—Ä–∏–∑–∞—Ü–∏–µ–π. –í—Å—ë —Ç–∞–∫ –∂–µ, –∫–∞–∫ –∏ –≤ –º–æ–∫–∞—Ö.
    //–ó–∞–¥–∞–Ω–∏–µ
    //–ü—É—Å—Ç—å –µ—Å—Ç—å –∫–ª–∞—Å—Å Cat:
    //public class Cat{
    //  private String name;
    //  public Cat(String name){
    //     this.name = name;
    //   }
    //}
    //–ù—É–∂–Ω–æ –ø–æ–∫—Ä—ã—Ç—å –µ–≥–æ —Ç–µ—Å—Ç–∞–º–∏: –∏—Å–ø–æ–ª—å–∑—É–π —à–ø–∏–æ–Ω. –°–æ–∑–¥–∞–π —Ç–µ—Å—Ç–æ–≤—ã–π –∫–ª–∞—Å—Å –∏ –æ–±—ä—è–≤–∏ –æ–±—ä–µ–∫—Ç —à–ø–∏–æ–Ω–æ–º —Å –ø–æ–º–æ—â—å—é –∞–Ω–Ω–æ—Ç–∞—Ü–∏–∏.
    //–ü—É—Å—Ç—å —É –æ–±—ä–µ–∫—Ç–∞ –¥–ª—è —à–ø–∏–æ–Ω–∞ –ø–æ–ª–µ name —Ä–∞–≤–Ω–æ "–ü—É—à–æ–∫".
    //import org.junit.runner.RunWith;
    //import org.mockito.junit.MockitoJUnitRunner;
    //import org.mockito.Spy;
    //@RunWith(MockitoJUnitRunner.class)//–Ω–∞–ø–∏—à–∏ —Ä–∞–Ω–Ω–µ—Ä
    //public class CatTest{
    //@Spy//–Ω–∞–ø–∏—à–∏ –∞–Ω–Ω–æ—Ç–∞—Ü–∏—é
    //public Cat cat = new Cat("–ü—É—à–æ–∫");//—Å–æ–∑–¥–∞–π –æ–±—ä–µ–∫—Ç
    //
    //}


    //–ö–æ–≥–¥–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å spy
    //–ò—Ç–∞–∫: —à–ø–∏–æ–Ω –æ—Ç–ª–∏—á–∞–µ—Ç—Å—è –æ—Ç –º–æ–∫–∞ —Ç–µ–º, —á—Ç–æ –µ–≥–æ –º–µ—Ç–æ–¥—ã –≤–æ–∑–≤—Ä–∞—â–∞—é—Ç —Ä–µ–∞–ª—å–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç.
    //–û–±—ã—á–Ω–æ —Ç—ã –ø—Ä–æ—Å—Ç–æ —Å–º–æ—Ç—Ä–∏—à—å, –≤—ã–∑–æ–≤–µ—Ç—Å—è –ª–∏ –º–µ—Ç–æ–¥ –∏ —Å–∫–æ–ª—å–∫–æ —Ä–∞–∑. –ù–æ –∏–Ω–æ–≥–¥–∞ —ç—Ç–æ–≥–æ –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç: –Ω—É–∂–Ω–æ –ø—Ä–æ—Å–ª–µ–¥–∏—Ç—å, –∫–∞–∫ –º–µ—Ç–æ–¥ —Å–µ–±—è –ø–æ–≤–µ–¥—ë—Ç –∏ —á—Ç–æ –≤–µ—Ä–Ω—ë—Ç. –ú–æ–∫ —Ç—É—Ç –Ω–µ –ø–æ–º–æ–∂–µ—Ç: –µ–≥–æ –º–µ—Ç–æ–¥—ã –≤–µ—Ä–Ω—É—Ç —Ç–æ–ª—å–∫–æ –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –∑–∞–º–æ–∫–∞–Ω–Ω—ã–π –æ–±—ä–µ–∫—Ç –±–µ—Å–ø–æ–ª–µ–∑–Ω–æ. –ê –≤–æ—Ç —à–ø–∏–æ–Ω –ø–æ–∑–≤–æ–ª—è–µ—Ç —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å —Ä–µ–∞–ª—å–Ω–æ–µ –ø–æ–≤–µ–¥–µ–Ω–∏–µ –º–µ—Ç–æ–¥–æ–≤, –Ω–æ –ø—Ä–∏ —ç—Ç–æ–º –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å –≤—ã–∑–æ–≤—ã.
    //–í —ç—Ç–æ–º —É—Ä–æ–∫–µ ‚Äî –æ —Ç–æ–º, –∫–æ–≥–¥–∞ —Ç–∞–∫–æ–µ –ø–æ–Ω–∞–¥–æ–±–∏—Ç—Å—è –≤ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏.

    //–ú–µ—Ç–æ–¥ –≤—ã–∑—ã–≤–∞–µ—Ç –¥—Ä—É–≥–æ–π –º–µ—Ç–æ–¥ —Ç–æ–≥–æ –∂–µ –∫–ª–∞—Å—Å–∞
    //–ü—Ä–µ–¥—Å—Ç–∞–≤—å: —Ç—ã —Ç–µ—Å—Ç–∏—Ä—É–µ—à—å –º–µ—Ç–æ–¥, –∞ –æ–Ω –≤—ã–∑—ã–≤–∞–µ—Ç –¥—Ä—É–≥–æ–π –º–µ—Ç–æ–¥ —Ç–æ–≥–æ –∂–µ –∫–ª–∞—Å—Å–∞. –ü—É—Å—Ç—å –µ—Å—Ç—å –∫–ª–∞—Å—Å ¬´–ö—Ä—É–≥¬ª ‚Äî  Circle. –í –Ω—ë–º –¥–≤–∞ –º–µ—Ç–æ–¥–∞, –∫–æ—Ç–æ—Ä—ã–µ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é—Ç —Ü–≤–µ—Ç –∫—Ä—É–≥–∞:
    //–û–¥–∏–Ω ‚Äî —á—Ç–æ–±—ã —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ü–≤–µ—Ç –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–∞–¥–∏—É—Å–∞. –ù–∞–ø—Ä–∏–º–µ—Ä, –µ—Å–ª–∏ —Ä–∞–¥–∏—É—Å –±–æ–ª—å—à–µ 5, –∫—Ä—É–≥ –±—É–¥–µ—Ç —Å–∏–Ω–∏–º.
    //–î—Ä—É–≥–æ–π ‚Äî —á—Ç–æ–±—ã –∑–∞–¥–∞—Ç—å —Ü–≤–µ—Ç –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é. –í —ç—Ç–æ–º —Å–ª—É—á–∞–µ –ø—Ä–æ–≥—Ä–∞–º–º–∞ —Å—á–∏—Ç–∞–µ—Ç, —á—Ç–æ —Ä–∞–¥–∏—É—Å —Ä–∞–≤–µ–Ω 1.
    //public class Circle {
    //    private String colour;
    //
    //    public String getColour() {
    //        return colour;
    //    }
    //
    //    public void setColour(int radius) { // –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–∞–¥–∏—É—Å–∞
    //        if (radius > 5) {colour = "BLUE");}
    //        else {colour = "RED");}
    //    }
    //
    //    public void setColour() { // –±–µ–∑ –ø—Ä–∏–≤—è–∑–∫–∏ –∫ —Ä–∞–¥–∏—É—Å—É
    //      setColour(1);
    //    }
    //
    //}
    //}

    //–ß—Ç–æ–±—ã —Ç–µ—Å—Ç –±—ã–ª –∏–∑–æ–ª–∏—Ä–æ–≤–∞–Ω, –º–æ–∂–Ω–æ —Å–æ–∑–¥–∞—Ç—å —à–ø–∏–æ–Ω –¥–ª—è –∫—Ä—É–≥–∞ ‚Äî –æ–±—ä–µ–∫—Ç–∞ –≤ –∫–ª–∞—Å—Å–µ Circle. –í—Å–µ –µ–≥–æ –º–µ—Ç–æ–¥—ã –æ—Ç—Ä–∞–±–æ—Ç–∞—é—Ç –∫–∞–∫ —Ä–µ–∞–ª—å–Ω—ã–µ. –¶–≤–µ—Ç —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—Å—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–∞–¥–∏—É—Å–∞.
    //–ü—Ä–∏ —ç—Ç–æ–º —Ç–µ—Å—Ç –¥–ª—è setColor() –±–µ–∑ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –±—É–¥–µ—Ç –∏–∑–æ–ª–∏—Ä–æ–≤–∞–Ω. –û–Ω —É–ø–∞–¥—ë—Ç, —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –≤ —Å–∞–º–æ–º –º–µ—Ç–æ–¥–µ —á—Ç–æ-—Ç–æ –Ω–µ —Ç–æ:
    //
    //import org.junit.Test;
    //import org.junit.runner.RunWith;
    //import org.mockito.Mock;
    //import org.mockito.junit.MockitoJUnitRunner;
    //import org.mockito.Mockito;
    //import org.mockito.Spy;
    //
    //import org.junit.Assert;
    //
    //@RunWith(MockitoJUnitRunner.class)
    //public class CircleTest {
    //
    //    @Spy // —à–ø–∏–æ–Ω –¥–ª—è –æ–±—ä–µ–∫—Ç–∞
    //    private Circle circle;
    //
    //    @Test
    //    void setColourRadiusGreater5ReturnsBlue{
    //        circle.setColour(10);
    //        Assert.assertEquals("BLUE", circle.getColour());
    //    }
    //
    //    @Test
    //    void setColourRadiusLess5ReturnsRed() {
    //        circle.setColour(3);
    //        Assert.assertEquals("RED", circle.getColour());
    //    }
    //
    //    @Test
    //    void setColourNoParamInvokeSetColourWith1() {
    //        circle.setColour();
    //        Mockito.verify(circle, Mockito.times(1)).setColour(1);
    //    }
    //
    //}


    //–ó–∞–¥–∞–Ω–∏–µ
    //–ï—Å—Ç—å –∫–ª–∞—Å—Å NameConverter. –ü–æ—Å–º–æ—Ç—Ä–∏ –Ω–∞ –µ–≥–æ –º–µ—Ç–æ–¥—ã:
    //public class NameConverter {
    //
    //    // —ç—Ç–æ—Ç –º–µ—Ç–æ–¥ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç—Ä–æ–∫—É —Ñ–∞–º–∏–ª–∏—è + –∏–º—è –∏–∑ –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
    //    public String getFullName(String name, String surname){
    //       if (surname != null && !surname.isBlank() && name != null && !name.isBlank()){
    //           return surname + " " + name;
    //       }
    //        if (surname != null && !surname.isBlank()){
    //            return surname;
    //        }
    //        if (name != null && !name.isBlank()){
    //            return name;
    //        }
    //        throw new RuntimeException("–ù–µ –≤–≤–µ–¥–µ–Ω–æ –Ω–∏ –æ–¥–Ω–æ –∑–Ω–∞—á–µ–Ω–∏–µ");
    //    }
    //
    //    // —ç—Ç–æ—Ç –º–µ—Ç–æ–¥ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –ª–æ–≥–∏–∫—É –ø–µ—Ä–≤–æ–≥–æ –º–µ—Ç–æ–¥–∞
    //    public String getFullNameByName(String name){
    //        return getFullName(name, null);
    //     }
    //    // —ç—Ç–æ—Ç –º–µ—Ç–æ–¥ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –ª–æ–≥–∏–∫—É –ø–µ—Ä–≤–æ–≥–æ –º–µ—Ç–æ–¥–∞
    //    public String getFullNameBySurname(String surname){
    //        return getFullName(null, surname);
    //    }
    //
    //}
    // –¢–µ–±–µ –Ω—É–∂–Ω–æ –Ω–∞–ø–∏—Å–∞—Ç—å —Ç–µ—Å—Ç—ã:
    // –ù–∞ –º–µ—Ç–æ–¥ getFullNameByName. –í —Ç–µ—Å—Ç–µ –≤—ã–∑–æ–≤–∏ –º–µ—Ç–æ–¥ —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–º ¬´–¢–∞–º–∞—Ä–∞¬ª.
    // –ù–∞ –º–µ—Ç–æ–¥ getFullNameBySurname. –í —Ç–µ—Å—Ç–µ –≤—ã–∑–æ–≤–∏ –º–µ—Ç–æ–¥ —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–º ¬´–ü–µ—Ç—Ä–æ–≤–∞¬ª.
    // –ù–∞–ø–∏—à–∏ —Ç–µ—Å—Ç—ã —Ç–∞–∫, —á—Ç–æ–±—ã –æ–Ω–∏ –±—ã–ª–∏ –ø–æ–ª–Ω–æ—Å—Ç—å—é –∏–∑–æ–ª–∏—Ä–æ–≤–∞–Ω—ã. –î–ª—è —ç—Ç–æ–≥–æ –æ–±—Ä–∞—Ç–∏ –≤–Ω–∏–º–∞–Ω–∏–µ, –∫–∞–∫–æ–π –∏–º–µ–Ω–Ω–æ –º–µ—Ç–æ–¥ –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –≤–Ω—É—Ç—Ä–∏ –∫–∞–∫–æ–≥–æ.
    // –ü—Ä–æ—à–ø–∏–æ–Ω—å –∑–∞ –µ–≥–æ –≤—ã–∑–æ–≤–æ–º —Å –Ω—É–∂–Ω—ã–º –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–º.
    //import org.junit.Test;
    //import org.junit.runner.RunWith;
    //import org.mockito.Mock;
    //import org.mockito.junit.MockitoJUnitRunner;
    //import org.mockito.Mockito;
    //import org.mockito.Spy;
    //
    //
    //@RunWith(MockitoJUnitRunner.class)
    //public class NameConverterTest {
    //
    //    @Spy
    //    private NameConverter nameConverter;
    //
    //    @Test
    //    public void getFullNameByName() {
    //        nameConverter.getFullNameByName("–¢–∞–º–∞—Ä–∞");; // –≤—ã–∑–æ–≤–∏ —Ç–µ—Å—Ç–∏—Ä—É–µ–º—ã–π –º–µ—Ç–æ–¥ —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–º ¬´–¢–∞–º–∞—Ä–∞¬ª
    //        Mockito.verify(nameConverter, Mockito.times(1)).getFullName("–¢–∞–º–∞—Ä–∞", null); // –ø—Ä–æ–≤–µ—Ä—å, —á—Ç–æ –≤–Ω—É—Ç—Ä–∏ —Ä–æ–≤–Ω–æ –æ–¥–∏–Ω —Ä–∞–∑
    //      //–≤—ã–∑–≤–∞–ª—Å—è –∏–º–µ–Ω–Ω–æ –Ω—É–∂–Ω—ã–π –º–µ—Ç–æ–¥
    //// c –Ω—É–∂–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
    //    }
    //
    //    @Test
    //   public void getFullNameBySurname() {
    //        nameConverter.getFullNameBySurname("–ü–µ—Ç—Ä–æ–≤–∞"); // –≤—ã–∑–æ–≤–∏ —Ç–µ—Å—Ç–∏—Ä—É–µ–º—ã–π –º–µ—Ç–æ–¥ —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–º –ü–µ—Ç—Ä–æ–≤–∞
    //        Mockito.verify(nameConverter, Mockito.times(1)).getFullName(null, "–ü–µ—Ç—Ä–æ–≤–∞"); // –ø—Ä–æ–≤–µ—Ä—å, —á—Ç–æ –≤–Ω—É—Ç—Ä–∏ —Ä–æ–≤–Ω–æ –æ–¥–∏–Ω —Ä–∞–∑
    ////–≤—ã–∑–≤–∞–ª—Å—è –∏–º–µ–Ω–Ω–æ –Ω—É–∂–Ω—ã–π –º–µ—Ç–æ–¥
    //// c –Ω—É–∂–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
    //    }
    //
    //}


    // –¢–µ—Å—Ç—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –∞—Ç–æ–º–∞—Ä–Ω—ã–º–∏ –∏ –Ω–µ –∑–∞–≤–∏—Å–∏—Ç—å –¥—Ä—É–≥ –æ—Ç –¥—Ä—É–≥–∞
    //–ö–∞–∫ —Ä–∞–∑–æ—Ä–≤–∞—Ç—å –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—å
    //–•–æ—Ä–æ—à–∏–π —Ç–µ—Å—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∏–∑–æ–ª–∏—Ä–æ–≤–∞–Ω. –ù–æ –±—ã–≤–∞–µ—Ç, –ø—Ä–æ–≥—Ä–∞–º–º–µ –Ω—É–∂–Ω—ã –¥–∞–Ω–Ω—ã–µ –∏–∑–≤–Ω–µ. –ù–∞–ø—Ä–∏–º–µ—Ä, –Ω—É–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å –æ–±—ä–µ–∫—Ç –∏–∑ –≤–Ω–µ—à–Ω–µ–π –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö.
    //–í–æ –≤–Ω–µ—à–Ω–µ–º –∏—Å—Ç–æ—á–Ω–∏–∫–µ –±—ã–≤–∞—é—Ç –æ—à–∏–±–∫–∏: –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –º–æ–∂–µ—Ç —É–ø–∞—Å—Ç—å. –¢–µ—Å—Ç —Å–∫–∞–∂–µ—Ç, —á—Ç–æ –æ—à–∏–±–∫–∞ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏: –ø–æ–Ω–∞–¥–æ–±–∏—Ç—Å—è –≤—Ä–µ–º—è, —á—Ç–æ–±—ã –ø–æ–Ω—è—Ç—å –Ω–∞—Å—Ç–æ—è—â—É—é –ø—Ä–∏—á–∏–Ω—É —Å–±–æ—è.
    //–ü—Ä–æ–≥—Ä–∞–º–º–∞ —Å–æ–µ–¥–∏–Ω—è–µ—Ç—Å—è —Å —É–¥–∞–ª—ë–Ω–Ω—ã–º —Å–µ—Ä–≤–µ—Ä–æ–º –∏ –ø–æ–ª—É—á–∞–µ—Ç –æ—Ç –Ω–µ–≥–æ –¥–∞–Ω–Ω—ã–µ. –≠—Ç–æ –≤–Ω–µ—à–Ω—è—è —Å–≤—è–∑—å. –ü—Ä–æ–≥—Ä–∞–º–º–∞ –∑–∞–≤–∏—Å–∏—Ç –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞: –µ—Å–ª–∏ –æ–Ω –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç, –∫–æ–¥ –Ω–µ –ø–æ–ª—É—á–∏—Ç –Ω—É–∂–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é.
    //–ö–ª–∞—Å—Å ServiceClass –ø–æ–ª—É—á–∞–µ—Ç –∫–æ–¥ –æ—Ç–≤–µ—Ç–∞ –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞:
    //import java.io.IOException;
    //import java.net.HttpURLConnection;
    //import java.net.URL;
    //
    //public class ServiceClass {
    //
    //    public int sendGet(String requestUrl) throws IOException {
    //        /*
    //        –°—Ç—Ä–æ–∫–∞ –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç—Å—è –≤ –æ–±—ä–µ–∫—Ç URL. –ï–≥–æ –∏—Å–ø–æ–ª—å–∑—É—é—Ç, —á—Ç–æ–±—ã —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å
    //        http/https —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å —É–¥–∞–ª—ë–Ω–Ω—ã–º —Å–µ—Ä–≤–µ—Ä–æ–º */
    //        URL url = new URL(requestUrl);
    //        // –û—Ç–∫—Ä—ã–≤–∞–µ—Ç—Å—è —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –º–µ–∂–¥—É –ø—Ä–æ–≥—Ä–∞–º–º–æ–π –∏ —É–¥–∞–ª—ë–Ω–Ω—ã–º —Å–µ—Ä–≤–µ—Ä–æ–º
    //        HttpURLConnection connection = (HttpURLConnection) url.openConnection();
    //        /* http-–º–µ—Ç–æ–¥ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è –Ω–∞ —Å–µ—Ä–≤–µ—Ä
    //        GET –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é */
    //        connection.setRequestMethod("GET");
    //        // –ü—Ä–∏—Ö–æ–¥–∏—Ç –∫–æ–¥ –æ—Ç–≤–µ—Ç–∞ –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞
    //        return connection.getResponseCode();
    //    }
    //
    //}
    //–ê –¥–∞–ª—å—à–µ –∫–ª–∞—Å—Å Server –ø—Ä–æ–≤–µ—Ä—è–µ—Ç, —á—Ç–æ —Å–µ—Ä–≤–µ—Ä –¥–æ—Å—Ç—É–ø–µ–Ω:
    //public class Server {
    //
    //    public String checkServer(int responseCode) {
    //        if (200 == responseCode) {
    //            return "–°–µ—Ä–≤–µ—Ä –¥–æ—Å—Ç—É–ø–µ–Ω";
    //        } else {
    //            return "–°–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω";
    //        }
    //    }
    //
    //}
    // –ü—Ä–µ–¥—Å—Ç–∞–≤—å, —á—Ç–æ —Ç—ã —Ç–µ—Å—Ç–∏—Ä—É–µ—à—å —ç—Ç–æ—Ç –∫–æ–¥. –°–µ—Ä–≤–µ—Ä –¥–æ–ª–∂–µ–Ω –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –∑–∞–ø—Ä–æ—Å –∏ –≤–µ—Ä–Ω—É—Ç—å –¥–∞–Ω–Ω—ã–µ:
    //import org.junit.Assert;
    //import org.junit.Test;
    //
    //import java.io.IOException;
    //
    //public class Praktikum {
    //
    //    @Test //–∞–Ω–Ω–æ—Ç–∞—Ü–∏—è, –∫–æ—Ç–æ—Ä–∞—è –∑–∞–ø—É—Å–∫–∞–µ—Ç —Ç–µ—Å—Ç
    //    public void test() throws IOException {
    //        ServiceClass serviceClass = new ServiceClass();
    //        Server server = new Server();
    //        int responseCode = serviceClass.sendGet("http://www.example.com/junk");
    //        System.out.println("–ö–æ–¥ –æ—Ç–≤–µ—Ç–∞ –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞: " + responseCode);
    //        String status = server.checkServer(responseCode);
    //        Assert.assertEquals("–°–µ—Ä–≤–µ—Ä –¥–æ—Å—Ç—É–ø–µ–Ω", status);
    //    }
    //
    //}
    //–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫. –ú–µ—Ç–æ–¥ sendGet() –≤–µ—Ä–Ω—É–ª –æ—à–∏–±–∫—É 404 ‚Äî Not Found. –¢–µ—Å—Ç –Ω–µ –ø—Ä–æ—à—ë–ª:
    // –ö–æ–¥ –æ—Ç–≤–µ—Ç–∞ –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞: 404
    //
    //org.junit.ComparisonFailure:
    //Expected :–°–µ—Ä–≤–µ—Ä –¥–æ—Å—Ç—É–ø–µ–Ω
    //Actual   :–°–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω
    //<Click to see difference>
    //
    //    at org.junit.Assert.assertEquals(Assert.java:117)
    //    at org.junit.Assert.assertEquals(Assert.java:146)
    //    at com.example.PraktikumTest.test(PraktikumTest.java:62)
    //    at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    //    at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
    //    at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
    //    at java.base/java.lang.reflect.Method.invoke(Method.java:566)
    //    at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:59)
    //    at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)
    //    at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:56)
    //    at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)
    //    at org.junit.runners.ParentRunner$3.evaluate(ParentRunner.java:306)
    //    at org.junit.runners.BlockJUnit4ClassRunner$1.evaluate(BlockJUnit4ClassRunner.java:100)
    //    at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:366)
    //    at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:103)
    //    at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:63)
    //    at org.junit.runners.ParentRunner$4.run(ParentRunner.java:331)
    //    at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:79)
    //    at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:329)
    //    at org.junit.runners.ParentRunner.access$100(ParentRunner.java:66)
    //    at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:293)
    //    at org.junit.runners.ParentRunner$3.evaluate(ParentRunner.java:306)
    //    at org.junit.runners.ParentRunner.run(ParentRunner.java:413)
    //    at org.junit.runner.JUnitCore.run(JUnitCore.java:137)
    //    at com.intellij.junit4.JUnit4IdeaTestRunner.startRunnerWithArgs(JUnit4IdeaTestRunner.java:69)
    //    at com.intellij.rt.junit.IdeaTestRunner$Repeater.startRunnerWithArgs(IdeaTestRunner.java:33)
    //    at com.intellij.rt.junit.JUnitStarter.prepareStreamsAndStart(JUnitStarter.java:235)
    //    at com.intellij.rt.junit.JUnitStarter.main(JUnitStarter.java:54)

    //–≠—Ç–æ –æ–∑–Ω–∞—á–∞–µ—Ç, —á—Ç–æ –ø—Ä–æ–≥—Ä–∞–º–º–∞ –Ω–µ –Ω–∞—à–ª–∞ —Å–µ—Ä–≤–µ—Ä. –¢–∞–∫ –º–æ–∂–µ—Ç –ø–æ–ª—É—á–∏—Ç—å—Å—è, –µ—Å–ª–∏ –µ–≥–æ —Ç–æ–ª—å–∫–æ —Ä–∞–∑—Ä–∞–±–∞—Ç—ã–≤–∞—é—Ç, –∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –Ω—É–∂–Ω–æ —É–∂–µ —Å–µ–π—á–∞—Å. –ò–ª–∏ –µ—Å–ª–∏ –ø—Ä–æ–±–ª–µ–º—ã —Å —Å–µ—Ç—å—é.
    // –ß—Ç–æ–±—ã –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –∫–æ–¥, –Ω—É–∂–Ω–æ —Ä–∞–∑–æ—Ä–≤–∞—Ç—å –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—å —Å –≤–Ω–µ—à–Ω–∏–º —Ä–µ—Å—É—Ä—Å–æ–º.
    //–ü–æ–º–æ–∂–µ—Ç –±–∏–±–ª–∏–æ—Ç–µ–∫–∞ Mockito: –æ–Ω–∞ —Å—ã–º–∏—Ç–∏—Ä—É–µ—Ç —Ä–∞–±–æ—Ç—É —Å–µ—Ä–≤–µ—Ä–∞. –ü–æ–Ω–∞–¥–æ–±–∏—Ç—Å—è —Å–æ–∑–¥–∞—Ç—å –º–æ–∫ –∏ –≤–µ—Ä–Ω—É—Ç—å –æ—Ç–≤–µ—Ç:
    //import org.junit.Assert;
    //import org.junit.Test;
    //import org.junit.runner.RunWith;
    //import org.mockito.Mock;
    //import org.mockito.Mockito;
    //import org.mockito.junit.MockitoJUnitRunner;
    //
    //import java.io.IOException;
    //
    //@RunWith(MockitoJUnitRunner.class)
    //public class Praktikum {
    //
    //    // –º–æ–∫ –∫–ª–∞—Å—Å–∞, —á—Ç–æ–±—ã –ø–µ—Ä–µ—Ö–≤–∞—Ç—ã–≤–∞—Ç—å –≤—ã–∑–æ–≤—ã –µ–≥–æ –º–µ—Ç–æ–¥–æ–≤
    //    @Mock
    //    ServiceClass serviceClass;
    //
    //    @Test
    //    public void test() throws IOException {
    //        Server server = new Server();
    //        /* –í–µ—Ä–Ω—ë—Ç—Å—è –∫–æ–¥ 200,
    //        —Ç—ã –∏–º–∏—Ç–∏—Ä—É–µ—à—å –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Ä–∞–±–æ—Ç—É –Ω—É–∂–Ω–æ–≥–æ —Ä–µ—Å—É—Ä—Å–∞ */
    //        Mockito.when(serviceClass.sendGet(Mockito.anyString())).thenReturn(200);
    //        int responseCode = serviceClass.sendGet("http://www.example.com/junk");
    //        System.out.println("–ö–æ–¥ –æ—Ç–≤–µ—Ç–∞ –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞: " + responseCode);
    //        String status = server.checkServer(responseCode);
    //        Assert.assertEquals("–°–µ—Ä–≤–µ—Ä –¥–æ—Å—Ç—É–ø–µ–Ω", status);
    //    }
    //}
    // –° –ø–æ–º–æ—â—å—é Mockito –º–æ–∂–Ω–æ —Ä–∞–∑–æ—Ä–≤–∞—Ç—å –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—å —Ç–µ—Å—Ç–æ–≤ –æ—Ç –≤–Ω–µ—à–Ω–∏—Ö –¥–∞–Ω–Ω—ã—Ö.
    // –ë–∏–±–ª–∏–æ—Ç–µ–∫–∞ —Å—ã–º–∏—Ç–∏—Ä—É–µ—Ç –æ—Ç–≤–µ—Ç—ã –≤–Ω–µ—à–Ω–∏—Ö —Å–∏—Å—Ç–µ–º. –¢—ã —Å–º–æ–∂–µ—à—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å, –∫–∞–∫ –ø—Ä–æ–≥—Ä–∞–º–º–∞ –≤–µ–¥–µ—Ç —Å–µ–±—è –≤ —Ä–∞–∑–Ω—ã—Ö —Å–∏—Ç—É–∞—Ü–∏—è—Ö.
    // –ù–∞–ø—Ä–∏–º–µ—Ä, –Ω—É–∂–Ω–æ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å, —á—Ç–æ –±—É–¥–µ—Ç, –µ—Å–ª–∏ –≤–Ω–µ—à–Ω–∏–π —Ä–µ—Å—É—Ä—Å –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–µ—Ç.
    // –ß–∞—â–µ –≤—Å–µ–≥–æ –Ω–µ –ø–æ–ª—É—á–∏—Ç—Å—è –≤—ã–∑–≤–∞—Ç—å –Ω–∞—Å—Ç–æ—è—â–∏–π —Å–±–æ–π –≤–æ –≤–µ—à–Ω–µ–π —Å–∏—Å—Ç–µ–º–µ, –Ω–æ —Å –ø–æ–º–æ—â—å—é Mockito –µ–≥–æ –º–æ–∂–Ω–æ —Å—ã–º–∏—Ç–∏—Ä–æ–≤–∞—Ç—å.



    // –ó–∞–¥–∞–Ω–∏–µ
    // –ö–ª–∞—Å—Å ServiceClass –ø–æ—Å—ã–ª–∞–µ—Ç –∑–∞–ø—Ä–æ—Å –Ω–∞ –∞–¥—Ä–µ—Å http://www.example.com. –° —Å–∞–π—Ç–æ–º –Ω–µ—Ç –ø—Ä–æ–±–ª–µ–º: –≤ –æ—Ç–≤–µ—Ç –Ω–∞ –∑–∞–ø—Ä–æ—Å –æ–Ω –ø—Ä–∏—Å—ã–ª–∞–µ—Ç –∫–æ–¥ 200.
    // –¢–≤–æ—è –∑–∞–¥–∞—á–∞ ‚Äî –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –º–µ—Ç–æ–¥ checkServer() –∫–ª–∞—Å—Å–∞ Server.
    // –°—ã–º–∏—Ç–∏—Ä—É–π —Å–ª—É—á–∞–π, –∫–æ–≥–¥–∞ —É–¥–∞–ª—ë–Ω–Ω—ã–π —Å–µ—Ä–≤–µ—Ä –Ω–µ —Å–º–æ–≥ –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –∑–∞–ø—Ä–æ—Å. –î–ª—è —ç—Ç–æ–≥–æ –Ω—É–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å –∫–æ–¥ 400 (Bad Request).
    //import org.junit.Assert;
    //import org.junit.Test;
    //import org.junit.runner.RunWith;
    //import org.mockito.Mock;
    //import org.mockito.Mockito;
    //import org.mockito.junit.MockitoJUnitRunner;
    //
    //import java.io.IOException;
    //import java.net.HttpURLConnection;
    //import java.net.URL;
    //
    //@RunWith(MockitoJUnitRunner.class)
    //public class Praktikum {
    //
    //    @Mock
    //    ServiceClass serviceClass;
    //
    //    @Test
    //    public void test() throws IOException {
    //        Server server = new Server();
    //        Mockito.when(serviceClass.sendGet(Mockito.anyString())).thenReturn(400);
    //        int responseCode = serviceClass.sendGet("http://www.example.com");
    //        String status = server.checkServer(responseCode);
    //        Assert.assertEquals("–°–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω", status);
    //    }
    //}
    //
    //class ServiceClass {
    //
    //    public int sendGet(String requestUrl) throws IOException {
    //        URL url = new URL(requestUrl);
    //        HttpURLConnection connection = (HttpURLConnection) url.openConnection();
    //        connection.setRequestMethod("GET");
    //        return connection.getResponseCode();
    //    }
    //
    //}
    //
    //class Server {
    //
    //    public String checkServer(int responseCode) {
    //        if (200 == responseCode) {
    //            return "–°–µ—Ä–≤–µ—Ä –¥–æ—Å—Ç—É–ø–µ–Ω";
    //        } else {
    //            return "–°–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω";
    //        }
    //    }
    //
    //}


    // –û—Ü–µ–Ω–∫–∞ –ø–æ–∫—Ä—ã—Ç–∏—è
    //–ü—Ä–µ–¥—Å—Ç–∞–≤—å: —Ç–µ–±–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–ø–∏—Å–∞—Ç—å —é–Ω–∏—Ç-—Ç–µ—Å—Ç—ã. –ù—É–∂–Ω–æ —É–∑–Ω–∞—Ç—å, –Ω–∞—Å–∫–æ–ª—å–∫–æ –ø–æ–ª–Ω–æ –æ–Ω–∏ –ø—Ä–æ–≤–µ—Ä—è—é—Ç —Å–µ—Ä–≤–∏—Å.
    //–°—É—â–µ—Å—Ç–≤—É–µ—Ç —Å–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –º–µ—Ç—Ä–∏–∫–∞ ‚Äî –æ—Ü–µ–Ω–∫–∞ –ø–æ–∫—Ä—ã—Ç–∏—è.
    //–†—É—Å—è
    //–ü—Ä–∏–º–µ—Ä
    //–°–µ—Ä–≤–∏—Å –≤—ã—á–∏—Å–ª—è–µ—Ç –∑–∞—Ä–ø–ª–∞—Ç—É –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –ø–æ –ø—Ä–æ–¥–∞–∂–∞–º. –°–æ—Ç—Ä—É–¥–Ω–∏–∫ –ø–æ–ª—É—á–∞–µ—Ç 5% —Å–æ –≤—Å–µ—Ö –ø—Ä–æ–¥–∞–∂ –∑–∞ –º–µ—Å—è—Ü, –Ω–æ –Ω–µ –±–æ–ª—å—à–µ –ø—è—Ç–∏–¥–µ—Å—è—Ç–∏ —Ç—ã—Å—è—á:
    //public class SalaryService {
    //
    //    public int calculateSalary(int sales) {
    //        int percent = 5;
    //        int salary = sales * percent / 100;
    //        int salaryLimit = 50_000;
    //        if (salary > salaryLimit) {
    //            salary = salaryLimit;
    //        }
    //        return salary;
    //    }
    //}
    //–¢–µ—Å—Ç–∏—Ä–æ–≤—â–∏–∫ –Ω–∞–ø–∏—Å–∞–ª —é–Ω–∏—Ç-—Ç–µ—Å—Ç –¥–ª—è —ç—Ç–æ–≥–æ —Å–µ—Ä–≤–∏—Å–∞:
    //import org.junit.Assert;
    //import org.junit.Test;
    //
    //public class SalaryServiceTest {
    //
    //    @Test
    //    public void shouldCalculateSalaryWhenUnderLimit() {
    //        SalaryService salaryService = new SalaryService();
    //        int actual = salaryService.calculateSalary(50_000);
    //        int expected = 2_500;
    //
    //        Assert.assertEquals(expected, actual);
    //    }
    //}
    //–ù—É–∂–Ω–æ –ø–æ–Ω—è—Ç—å, —Ö–æ—Ä–æ—à–æ –ª–∏ –º–µ—Ç–æ–¥ calculateSalary –ø–æ–∫—Ä—ã—Ç —Ç–µ—Å—Ç–∞–º–∏. –î–ª—è —ç—Ç–æ–≥–æ –ø–æ–Ω–∞–¥–æ–±–∏—Ç—Å—è –æ—Ü–µ–Ω–∏—Ç—å –ø–æ–∫—Ä—ã—Ç–∏–µ.
    //üìå –ü–æ–∫—Ä—ã—Ç–∏–µ –∫–æ–¥–∞ (code coverage) –≥–æ–≤–æ—Ä–∏—Ç, –∫–∞–∫–æ–π –ø—Ä–æ—Ü–µ–Ω—Ç –ø—Ä–æ–≥—Ä–∞–º–º—ã –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –≤–æ –≤—Ä–µ–º—è —Ç–µ—Å—Ç–æ–≤.
    //–ú–æ–∂–Ω–æ —Å–º–æ—Ç—Ä–µ—Ç—å –Ω–∞ –ø—Ä–æ—Ü–µ–Ω—Ç –ø–æ–∫—Ä—ã—Ç—ã—Ö —Å—Ç—Ä–æ–∫ –∫–æ–¥–∞, —É—Å–ª–æ–≤–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–≤ –∏ –º–µ—Ç–æ–¥–æ–≤.
    //–†—É—Å—è
    //–ü–æ–¥—Ä–æ–±–Ω–æ
    //–ü—Ä–æ—Ü–µ–Ω—Ç —Å—Ç—Ä–æ–∫ –∫–æ–¥–∞
    //–°—Ç—Ä–æ–∫–∞ –∫–æ–¥–∞ —Å—á–∏—Ç–∞–µ—Ç—Å—è –ø–æ–∫—Ä—ã—Ç–æ–π, –µ—Å–ª–∏ –æ–Ω–∞ —Ö–æ—Ç—è –±—ã —Ä–∞–∑ –≤—ã–ø–æ–ª–Ω–∏–ª–∞—Å—å –≤–æ –≤—Ä–µ–º—è —Ç–µ—Å—Ç–∞.
    //–ù–∞–ø—Ä–∏–º–µ—Ä, —Å—Ç—Ä–æ–∫–∞ int salary = sales * percent / 100; –ø–æ–∫—Ä—ã—Ç–∞. –û–Ω–∞ –≤—Å–µ–≥–¥–∞ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è, –∫–æ–≥–¥–∞ —Ç—ã –≤—ã–∑—ã–≤–∞–µ—à—å –º–µ—Ç–æ–¥ calculateSalary. –ï—ë –≤—ã–∑–æ–≤ –Ω–µ –∑–∞–≤–∏—Å–∏—Ç –æ—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤.
    //–ê –≤–æ—Ç —Å—Ç—Ä–æ–∫–∞ salary = salaryLimit; –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –Ω–µ –≤—Å–µ–≥–¥–∞. –ï—Å–ª–∏ –∑–∞—Ä–ø–ª–∞—Ç–∞ –Ω–µ –ø—Ä–µ–≤—ã—à–∞–µ—Ç –ª–∏–º–∏—Ç, –∫–æ–¥ –≤–Ω—É—Ç—Ä–∏ if –Ω–µ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è. –≠—Ç–∞ —Å—Ç—Ä–æ–∫–∞ –Ω–µ –ø–æ–∫—Ä—ã—Ç–∞.
    //–†—É—Å—è
    //–î–∞–ª—å—à–µ
    //–ü—Ä–æ—Ü–µ–Ω—Ç –ø–æ–∫—Ä—ã—Ç—ã—Ö —É—Å–ª–æ–≤–∏–π
    //–£—Å–ª–æ–≤–∏–µ —Å—á–∏—Ç–∞–µ—Ç—Å—è –ø–æ–∫—Ä—ã—Ç—ã–º, –µ—Å–ª–∏ –∫–∞–∂–¥–∞—è –≤–µ—Ç–≤—å —Ä–µ—à–µ–Ω–∏—è –≤—ã–ø–æ–ª–Ω–∏–ª–∞—Å—å.
    //–ù–∞–ø—Ä–∏–º–µ—Ä, —É—Å–ª–æ–≤–∏–µ if (salary > salaryLimit) –ø–æ–∫—Ä—ã—Ç–æ —á–∞—Å—Ç–∏—á–Ω–æ: —Ç–µ—Å—Ç –ø—Ä–æ–≤–µ—Ä—è–µ—Ç —Ç–æ–ª—å–∫–æ –≤–∞—Ä–∏–∞–Ω—Ç —Å –∑–∞—Ä–ø–ª–∞—Ç–æ–π –Ω–∏–∂–µ –ª–∏–º–∏—Ç–∞. –ü—Ä–µ–≤—ã—à–µ–Ω–∏–µ –Ω–µ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç—Å—è.
    //–†—É—Å—è
    //–ò –æ—Å—Ç–∞–ª—Å—è?
    //–ü—Ä–æ—Ü–µ–Ω—Ç –ø–æ–∫—Ä—ã—Ç—ã—Ö –º–µ—Ç–æ–¥–æ–≤
    //–ú–µ—Ç–æ–¥ —Å—á–∏—Ç–∞–µ—Ç—Å—è –ø–æ–∫—Ä—ã—Ç—ã–º, –µ—Å–ª–∏ –æ–Ω –≤—ã–ø–æ–ª–Ω–∏–ª—Å—è –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω —Ä–∞–∑.
    //–ù–∞–ø—Ä–∏–º–µ—Ä, –º–µ—Ç–æ–¥ calculateSalary –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –≤ —Ç–µ—Å—Ç–µ. –ó–Ω–∞—á–∏—Ç, –æ–Ω –ø–æ–∫—Ä—ã—Ç.
    //–†—É—Å—è
    //–û–∫
    //–ö–∞–∫ —Å—á–∏—Ç–∞—Ç—å –ø–æ–∫—Ä—ã—Ç–∏–µ
    //–í—Ä—É—á–Ω—É—é —Å—á–∏—Ç–∞—Ç—å –ø–æ–∫—Ä—ã—Ç–∏–µ –Ω–µ—É–¥–æ–±–Ω–æ –∏ –¥–æ–ª–≥–æ. –ü–æ–º–æ–≥–∞—é—Ç —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã. –û–¥–∏–Ω –∏–∑ —Å–∞–º—ã—Ö –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö ‚Äî –ø–ª–∞–≥–∏–Ω Jacoco.
    //–ü–ª–∞–≥–∏–Ω ‚Äî —ç—Ç–æ –º–æ–¥—É–ª—å, –∫–æ—Ç–æ—Ä—ã–π —Ä–∞—Å—à–∏—Ä—è–µ—Ç –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –ø—Ä–æ–≥—Ä–∞–º–º—ã. –ï–≥–æ –Ω—É–∂–Ω–æ –ø–æ–¥–∫–ª—é—á–∞—Ç—å –æ—Ç–¥–µ–ª—å–Ω–æ. –≠—Ç–æ –ø–æ—Ö–æ–∂–µ –Ω–∞ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è –≤ –±—Ä–∞—É–∑–µ—Ä–µ: –Ω–∞–ø—Ä–∏–º–µ—Ä, –±–ª–æ–∫–∏—Ä–æ–≤—â–∏–∫ —Ä–µ–∫–ª–∞–º—ã.
    //–í—Å–ø–æ–º–Ω–∏ Maven: –æ–Ω –≤—ã–ø–æ–ª–Ω—è–µ—Ç –≤—Å–µ –∑–∞–¥–∞—á–∏ —Å –ø–æ–º–æ—â—å—é –ø–ª–∞–≥–∏–Ω–æ–≤. –ö –ø—Ä–∏–º–µ—Ä—É, —Å –ø–æ–º–æ—â—å—é –ø–ª–∞–≥–∏–Ω–∞ maven-compiler-plugin –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –∫–æ–º–ø–∏–ª—è—Ü–∏—è.
    //–†—É—Å—è
    //–ê–≥–∞
    //–ß—Ç–æ–±—ã –ø–æ–¥–∫–ª—é—á–∏—Ç—å –ø–ª–∞–≥–∏–Ω, –Ω—É–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å —Å–µ–∫—Ü–∏—é build –≤ pom.xml. –í –Ω–µ—ë –∏ –∑–∞–ø–∏—Å—ã–≤–∞—é—Ç—Å—è –ø–ª–∞–≥–∏–Ω—ã ‚Äî —Å –ø–æ–º–æ—â—å—é —Ç–µ–≥–∞ plugin:
    //<?xml version="1.0" encoding="UTF-8"?>
    //<project xmlns="http://maven.apache.org/POM/4.0.0"
    //         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    //         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    //    <modelVersion>4.0.0</modelVersion>
    //
    //    <groupId>ru.yandex.praktikum</groupId>
    //    <artifactId>coverage</artifactId>
    //    <version>1.0-SNAPSHOT</version>
    //
    //    <properties>
    //        <!--–∑–¥–µ—Å—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏-->
    //    </properties>
    //
    //    <dependencies>
    //        <!--–∑–¥–µ—Å—å –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏-->
    //    </dependencies>
    //
    //    <build>
    //        <plugins>
    //            <plugin>
    //                <!--–∑–¥–µ—Å—å –ø–ª–∞–≥–∏–Ω jacoco-->
    //            </plugin>
    //        </plugins>
    //    </build>
    //
    //</project>
    //–ó–∞—Ç–µ–º –Ω—É–∂–Ω–æ —É–∫–∞–∑–∞—Ç—å groupId, artifactId, version ‚Äî —Ç–∞–∫ –∂–µ, –∫–∞–∫ –¥–ª—è dependency:
    //        <build>
    //        <plugins>
    //            <plugin>
    //                                <groupId>org.jacoco</groupId>
    //                <artifactId>jacoco-maven-plugin</artifactId>
    //                <version>0.8.7</version>
    //            </plugin>
    //        </plugins>
    //    </build>
    //–û—Å—Ç–∞—ë—Ç—Å—è –¥–æ–±–∞–≤–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –¥–ª—è –ø–ª–∞–≥–∏–Ω–∞ ‚Äî –≤ —Ç–µ–≥–µ executions.

    //–ß—Ç–æ–±—ã –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –ø–æ–∫—Ä—ã—Ç–∏–µ –∏ —Å–æ–∑–¥–∞—Ç—å –æ—Ç—á—ë—Ç —Å —ç—Ç–∏–º–∏ –¥–∞–Ω–Ω—ã–º–∏, –ø–æ–Ω–∞–¥–æ–±–∏—Ç—Å—è –¥–≤–µ —Ü–µ–ª–∏ Jacoco.
    //–¶–µ–ª—å –ø–ª–∞–≥–∏–Ω–∞ ‚Äî —ç—Ç–æ –∑–∞–¥–∞—á–∞, –∫–æ—Ç–æ—Ä—É—é –æ–Ω –≤—ã–ø–æ–ª–Ω—è–µ—Ç. –ù–∞–ø—Ä–∏–º–µ—Ä, —Ü–µ–ª—å mvn compiler:compile ‚Äî —Å–∫–æ–º–ø–∏–ª–∏—Ä–æ–≤–∞—Ç—å –∫–æ–¥.
    //–ü–µ—Ä–≤–∞—è —Ü–µ–ª—å ‚Äî prepare-agent. –û–Ω–∞ –Ω—É–∂–Ω–∞ –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π —Ä–∞–±–æ—Ç—ã –ø–ª–∞–≥–∏–Ω–∞. –í—Ç–æ—Ä–∞—è ‚Äî report: –æ–Ω–∞ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –æ—Ç—á—ë—Ç.
    //<build>
    //        <plugins>
    //            <plugin>
    //                <groupId>org.jacoco</groupId>
    //                <artifactId>jacoco-maven-plugin</artifactId>
    //                <version>0.8.7</version>
    //                <executions>
    //                    <execution>
    //                        <!--id –≤—ã–±–∏—Ä–∞–µ—à—å —Å–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ-->
    //                        <id>prepare-agent</id>
    //                        <!--–≤ –∫–∞–∫–æ–π —Ñ–∞–∑–µ maven –±—É–¥–µ—Ç –≤—ã–ø–æ–ª–Ω—è—Ç—å—Å—è —Ü–µ–ª—å-->
    //                        <phase>initialize</phase>
    //                        <!--—Ü–µ–ª—å jacoco, –∫–æ—Ç–æ—Ä—É—é –Ω—É–∂–Ω–æ –≤—ã–ø–æ–ª–Ω–∏—Ç—å-->
    //                        <goals>
    //                            <goal>prepare-agent</goal>
    //                        </goals>
    //                    </execution>
    //                    <execution>
    //                        <id>report</id>
    //                        <phase>verify</phase>
    //                        <goals>
    //                            <goal>report</goal>
    //                        </goals>
    //                    </execution>
    //                </executions>
    //            </plugin>
    //        </plugins>
    //    </build>
    //–°–∞–º—ã–π –ø—Ä–æ—Å—Ç–æ–π —Å–ø–æ—Å–æ–± –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –æ—Ç—á—ë—Ç ‚Äî –æ—Ç–∫—Ä—ã—Ç—å –µ–≥–æ –≤ –±—Ä–∞—É–∑–µ—Ä–µ. –í—ã–ø–æ–ª–Ω–∏ –∫–æ–º–∞–Ω–¥—É mvn verify: –¥–ª—è —ç—Ç–æ–≥–æ –≤ IDEA –Ω–∞–∂–º–∏ Ctrl –¥–≤–∞–∂–¥—ã. –û—Ç–∫—Ä–æ–µ—Ç—Å—è –æ–∫–Ω–æ: –Ω–∞–ø–∏—à–∏ –≤ –Ω—ë–º —ç—Ç—É –∫–æ–º–∞–Ω–¥—É.
    //–ù–∞–π–¥–∏ –≤ –ø–∞–ø–∫–µ target/site/jacoco/ —Ñ–∞–π–ª index.html, –Ω–∞–∂–º–∏ –Ω–∞ –Ω–µ–≥–æ –ø—Ä–∞–≤–æ–π –∫–Ω–æ–ø–∫–æ–π –º—ã—à–∏ –∏ –≤—ã–±–µ—Ä–∏ Open In ‚Äî Browser ‚Äî —Ç–≤–æ–π –±—Ä–∞—É–∑–µ—Ä.
    //https://code.s3.yandex.net/qa-automation-engineer/java/schemes/paid-track/sprint2/unitTests/S2_05_15.png
    //–í –æ—Ç—á—ë—Ç–µ –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è –ø—Ä–æ—Ü–µ–Ω—Ç –ø–æ–∫—Ä—ã—Ç—ã—Ö —Å—Ç—Ä–æ–∫ –∫–æ–¥–∞ ‚Äî —Å—Ç–æ–ª–±–µ—Ü Missed Instructions. –í –ø—Ä–∏–º–µ—Ä–µ –ø–æ–∫—Ä—ã—Ç–æ 90% —Å—Ç—Ä–æ–∫.
    //–ü—Ä–æ—Ü–µ–Ω—Ç –ø–æ–∫—Ä—ã—Ç—ã—Ö –≤–µ—Ç–≤–µ–π ‚Äî —Å—Ç–æ–ª–±–µ—Ü Missed Branches. –í –ø—Ä–∏–º–µ—Ä–µ –ø–æ–∫—Ä—ã—Ç–æ 50% –≤–µ—Ç–≤–µ–π.
    //–ß—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å –ø–æ–¥—Ä–æ–±–Ω–µ–µ, –∫–∞–∫–∏–µ –∏–º–µ–Ω–Ω–æ —Å—Ç—Ä–æ–∫–∏ –∏ –≤–µ—Ç–≤–∏ –Ω–µ –ø–æ–∫—Ä—ã—Ç—ã, –∑–∞–π–¥–∏ –≤ –ø–∞–∫–µ—Ç, –∫–ª–∞—Å—Å –∏ –º–µ—Ç–æ–¥ –≤–Ω—É—Ç—Ä–∏ –Ω–µ–≥–æ:
    //https://code.s3.yandex.net/qa-automation-engineer/java/schemes/paid-track/sprint2/unitTests/S2_05_16.png
    //–¶–≤–µ—Ç–∞ —Å—Ç—Ä–æ–∫ –æ–∑–Ω–∞—á–∞—é—Ç, –Ω–∞—Å–∫–æ–ª—å–∫–æ –ø–æ–ª–Ω–æ —Ç–µ—Å—Ç –ø–æ–∫—Ä—ã—Ç. –ó–µ–ª—ë–Ω—ã–π ‚Äî –ø–æ–∫—Ä—ã—Ç–æ —Ç–µ—Å—Ç–∞–º–∏, –∂—ë–ª—Ç—ã–π ‚Äî –ø–æ–∫—Ä—ã—Ç–æ —á–∞—Å—Ç–∏—á–Ω–æ, –∫—Ä–∞—Å–Ω—ã–π ‚Äî –Ω–µ –ø–æ–∫—Ä—ã—Ç–æ —Å–æ–≤—Å–µ–º.
    //–û—Ç—á—ë—Ç –º–æ–∂–Ω–æ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∏ –ø—Ä—è–º–æ –≤ IDEA: –¥–ª—è —ç—Ç–æ–≥–æ –æ—Ç–∫—Ä–æ–π Run ‚Äî Show Coverage Api.Data. –ù–∞–∂–º–∏ + (Add) –∏ –≤—ã–±–µ—Ä–∏ —Ñ–∞–π–ª jacoco.exec.
    //https://code.s3.yandex.net/qa-automation-engineer/java/schemes/paid-track/sprint2/unitTests/S2_05_17.png
    //–ü–æ—Å–ª–µ —ç—Ç–æ–≥–æ –Ω–∞–∂–º–∏ Show Selected. –£ —Ü–≤–µ—Ç–æ–≤ —Å–ª–µ–≤–∞ —Ç–µ –∂–µ –∑–Ω–∞—á–µ–Ω–∏—è:
    //https://code.s3.yandex.net/qa-automation-engineer/java/schemes/paid-track/sprint2/unitTests/S2_05_18.png





}

